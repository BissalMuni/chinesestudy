{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\chinesestudy\\\\src\\\\components\\\\LegacyApp.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Navigation from './Navigation';\nimport SentenceCard from './SentenceCard';\nimport { isDateBasedContent, isCategoryContent, isDayContent } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LegacyApp = ({\n  onBackClick\n}) => {\n  _s();\n  const [sentenceData, setSentenceData] = useState(null);\n  const [availableDates, setAvailableDates] = useState([]);\n  const [pastMonths, setPastMonths] = useState([]);\n  const [presentMonths, setPresentMonths] = useState([]);\n  const [selectedMonth, setSelectedMonth] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('Ï†ÑÏ≤¥');\n  const [lastSelectedFolder, setLastSelectedFolder] = useState('');\n  const [lastSelectedMonth, setLastSelectedMonth] = useState('');\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Initialize component - load available months\n  useEffect(() => {\n    const loadAvailableMonths = async () => {\n      try {\n        // Load past months\n        const pastResponse = await fetch('/data/past/manifest.json');\n        if (pastResponse.ok) {\n          const pastManifest = await pastResponse.json();\n          const pastFiles = pastManifest.files || [];\n          const pastMonthList = pastFiles.map(file => file.replace('.json', ''));\n          setPastMonths(pastMonthList);\n        }\n\n        // Load present months\n        const presentResponse = await fetch('/data/present/manifest.json');\n        if (presentResponse.ok) {\n          const presentManifest = await presentResponse.json();\n          const presentFiles = presentManifest.files || [];\n          const presentMonthList = presentFiles.map(file => file.replace('.json', ''));\n          setPresentMonths(presentMonthList);\n        }\n      } catch (error) {\n        console.error('Failed to load manifests:', error);\n      }\n    };\n    loadAvailableMonths();\n  }, []);\n\n  // Set default month when months are loaded\n  useEffect(() => {\n    if (presentMonths.length > 0 && !selectedMonth) {\n      const latestMonth = [...presentMonths].sort().pop() || '';\n      setSelectedMonth(latestMonth);\n      handlePresentMonthChange(latestMonth);\n    } else if (pastMonths.length > 0 && presentMonths.length === 0 && !selectedMonth) {\n      const latestMonth = [...pastMonths].sort().pop() || '';\n      setSelectedMonth(latestMonth);\n      handlePastMonthChange(latestMonth);\n    }\n  }, [presentMonths, pastMonths, selectedMonth]);\n  const handlePastMonthChange = async month => {\n    await loadMonthData(month, 'past');\n    setLastSelectedFolder('past');\n    setLastSelectedMonth(month);\n  };\n  const handlePresentMonthChange = async month => {\n    await loadMonthData(month, 'present');\n    setLastSelectedFolder('present');\n    setLastSelectedMonth(month);\n  };\n  const loadMonthData = async (month, folder) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`/data/${folder}/${month}.json`);\n      if (!response.ok) {\n        throw new Error(`Failed to load data for ${month}`);\n      }\n      const data = await response.json();\n      setSentenceData(data);\n      setSelectedMonth(month);\n\n      // Extract available dates\n      const dates = [];\n      data.contents.forEach(content => {\n        if (isDateBasedContent(content)) {\n          dates.push(content.date);\n        } else if (isDayContent(content)) {\n          dates.push(`${month}-${String(content.day).padStart(2, '0')}`);\n        }\n      });\n      setAvailableDates(dates.sort());\n\n      // Set first available date as selected\n      if (dates.length > 0) {\n        setSelectedDate(dates[0]);\n      }\n      setSelectedCategory('Ï†ÑÏ≤¥');\n    } catch (error) {\n      console.error('Error loading month data:', error);\n      setError(`Failed to load data for ${month}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleMonthChange = month => {\n    if (pastMonths.includes(month)) {\n      handlePastMonthChange(month);\n    } else {\n      handlePresentMonthChange(month);\n    }\n  };\n  const handleDateChange = date => {\n    setSelectedDate(date);\n    setSelectedCategory('Ï†ÑÏ≤¥');\n  };\n  const handleCategoryChange = category => {\n    setSelectedCategory(category);\n  };\n\n  // Get sentences for display\n  const getDisplaySentences = () => {\n    if (!sentenceData) return [];\n    const sections = [];\n\n    // Find the content for the selected date\n    const selectedDay = selectedDate ? parseInt(selectedDate.split('-')[2]) : 1;\n    sentenceData.contents.forEach(content => {\n      if (isDateBasedContent(content) && content.date === selectedDate) {\n        // Old date-based format\n        content.sentences.forEach(sentence => {\n          sections.push({\n            type: 'sentence',\n            sentence\n          });\n        });\n      } else if (isDayContent(content) && content.day === selectedDay) {\n        // New day-based format with categories\n        content.content.forEach(categoryContent => {\n          if (selectedCategory === 'Ï†ÑÏ≤¥' || categoryContent.category === selectedCategory) {\n            categoryContent.subcategories.forEach(subcategory => {\n              if (subcategory.subcategory) {\n                sections.push({\n                  type: 'divider',\n                  dividerText: subcategory.subcategory\n                });\n              }\n              subcategory.sentences.forEach(sentence => {\n                sections.push({\n                  type: 'sentence',\n                  sentence\n                });\n              });\n            });\n          }\n        });\n      } else if (isCategoryContent(content)) {\n        // Category-based format\n        if (selectedCategory === 'Ï†ÑÏ≤¥' || content.category === selectedCategory) {\n          content.subcategories.forEach(subcategory => {\n            if (subcategory.subcategory) {\n              sections.push({\n                type: 'divider',\n                dividerText: subcategory.subcategory\n              });\n            }\n            subcategory.sentences.forEach(sentence => {\n              sections.push({\n                type: 'sentence',\n                sentence\n              });\n            });\n          });\n        }\n      }\n    });\n    return sections;\n  };\n  const displaySections = getDisplaySentences();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${isDarkMode ? 'dark-mode' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onBackClick,\n          className: \"back-button\",\n          children: \"\\u2190 \\uB4A4\\uB85C\\uAC00\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\uC911\\uAD6D\\uC5B4 \\uD559\\uC2B5 \\uC571 (\\uAE30\\uC874 UI)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"theme-toggle\",\n          onClick: () => setIsDarkMode(!isDarkMode),\n          title: isDarkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode',\n          children: isDarkMode ? '‚òÄÔ∏è' : 'üåô'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-info\",\n        children: selectedMonth && `${selectedMonth.replace('-', 'ÎÖÑ ')}Ïõî`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      availableDates: availableDates,\n      pastMonths: pastMonths,\n      presentMonths: presentMonths,\n      selectedMonth: selectedMonth,\n      selectedDate: selectedDate,\n      selectedCategory: selectedCategory,\n      sentenceData: sentenceData,\n      lastSelectedFolder: lastSelectedFolder,\n      lastSelectedMonth: lastSelectedMonth,\n      onMonthChange: handleMonthChange,\n      onDateChange: handleDateChange,\n      onCategoryChange: handleCategoryChange,\n      onPastMonthChange: handlePastMonthChange,\n      onPresentMonthChange: handlePresentMonthChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"content\",\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uC624\\uB958\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this), !loading && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-container\",\n        children: displaySections.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading\",\n          children: \"\\uC120\\uD0DD\\uB41C \\uB0A0\\uC9DC\\uC5D0 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 15\n        }, this) : displaySections.map((section, index) => {\n          var _section$sentence;\n          return section.type === 'divider' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"subcategory-divider\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: section.dividerText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 21\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(SentenceCard, {\n            sentence: section.sentence\n          }, `${(_section$sentence = section.sentence) === null || _section$sentence === void 0 ? void 0 : _section$sentence.id}-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n_s(LegacyApp, \"PFzfezHhYbk+P2O4lqAqoTYQZf0=\");\n_c = LegacyApp;\nexport default LegacyApp;\nvar _c;\n$RefreshReg$(_c, \"LegacyApp\");","map":{"version":3,"names":["React","useState","useEffect","Navigation","SentenceCard","isDateBasedContent","isCategoryContent","isDayContent","jsxDEV","_jsxDEV","LegacyApp","onBackClick","_s","sentenceData","setSentenceData","availableDates","setAvailableDates","pastMonths","setPastMonths","presentMonths","setPresentMonths","selectedMonth","setSelectedMonth","selectedDate","setSelectedDate","selectedCategory","setSelectedCategory","lastSelectedFolder","setLastSelectedFolder","lastSelectedMonth","setLastSelectedMonth","isDarkMode","setIsDarkMode","loading","setLoading","error","setError","loadAvailableMonths","pastResponse","fetch","ok","pastManifest","json","pastFiles","files","pastMonthList","map","file","replace","presentResponse","presentManifest","presentFiles","presentMonthList","console","length","latestMonth","sort","pop","handlePresentMonthChange","handlePastMonthChange","month","loadMonthData","folder","response","Error","data","dates","contents","forEach","content","push","date","String","day","padStart","handleMonthChange","includes","handleDateChange","handleCategoryChange","category","getDisplaySentences","sections","selectedDay","parseInt","split","sentences","sentence","type","categoryContent","subcategories","subcategory","dividerText","displaySections","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","title","onMonthChange","onDateChange","onCategoryChange","onPastMonthChange","onPresentMonthChange","section","index","_section$sentence","id","_c","$RefreshReg$"],"sources":["D:/Coding/chinesestudy/src/components/LegacyApp.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Navigation from './Navigation';\nimport SentenceCard from './SentenceCard';\nimport WordCard from './WordCard';\nimport { SentenceData, ContentSection, isDateBasedContent, isCategoryContent, isDayContent, Sentence } from '../types';\n\ninterface LegacyAppProps {\n  onBackClick: () => void;\n}\n\nconst LegacyApp: React.FC<LegacyAppProps> = ({ onBackClick }) => {\n  const [sentenceData, setSentenceData] = useState<SentenceData | null>(null);\n  const [availableDates, setAvailableDates] = useState<string[]>([]);\n  const [pastMonths, setPastMonths] = useState<string[]>([]);\n  const [presentMonths, setPresentMonths] = useState<string[]>([]);\n  const [selectedMonth, setSelectedMonth] = useState<string>('');\n  const [selectedDate, setSelectedDate] = useState<string>('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('Ï†ÑÏ≤¥');\n  const [lastSelectedFolder, setLastSelectedFolder] = useState<string>('');\n  const [lastSelectedMonth, setLastSelectedMonth] = useState<string>('');\n  const [isDarkMode, setIsDarkMode] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Initialize component - load available months\n  useEffect(() => {\n    const loadAvailableMonths = async () => {\n      try {\n        // Load past months\n        const pastResponse = await fetch('/data/past/manifest.json');\n        if (pastResponse.ok) {\n          const pastManifest = await pastResponse.json();\n          const pastFiles = pastManifest.files || [];\n          const pastMonthList = pastFiles.map((file: string) => file.replace('.json', ''));\n          setPastMonths(pastMonthList);\n        }\n\n        // Load present months\n        const presentResponse = await fetch('/data/present/manifest.json');\n        if (presentResponse.ok) {\n          const presentManifest = await presentResponse.json();\n          const presentFiles = presentManifest.files || [];\n          const presentMonthList = presentFiles.map((file: string) => file.replace('.json', ''));\n          setPresentMonths(presentMonthList);\n        }\n      } catch (error) {\n        console.error('Failed to load manifests:', error);\n      }\n    };\n\n    loadAvailableMonths();\n  }, []);\n\n  // Set default month when months are loaded\n  useEffect(() => {\n    if (presentMonths.length > 0 && !selectedMonth) {\n      const latestMonth = [...presentMonths].sort().pop() || '';\n      setSelectedMonth(latestMonth);\n      handlePresentMonthChange(latestMonth);\n    } else if (pastMonths.length > 0 && presentMonths.length === 0 && !selectedMonth) {\n      const latestMonth = [...pastMonths].sort().pop() || '';\n      setSelectedMonth(latestMonth);\n      handlePastMonthChange(latestMonth);\n    }\n  }, [presentMonths, pastMonths, selectedMonth]);\n\n  const handlePastMonthChange = async (month: string) => {\n    await loadMonthData(month, 'past');\n    setLastSelectedFolder('past');\n    setLastSelectedMonth(month);\n  };\n\n  const handlePresentMonthChange = async (month: string) => {\n    await loadMonthData(month, 'present');\n    setLastSelectedFolder('present');\n    setLastSelectedMonth(month);\n  };\n\n  const loadMonthData = async (month: string, folder: string) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await fetch(`/data/${folder}/${month}.json`);\n      if (!response.ok) {\n        throw new Error(`Failed to load data for ${month}`);\n      }\n      \n      const data: SentenceData = await response.json();\n      setSentenceData(data);\n      setSelectedMonth(month);\n      \n      // Extract available dates\n      const dates: string[] = [];\n      data.contents.forEach(content => {\n        if (isDateBasedContent(content)) {\n          dates.push(content.date);\n        } else if (isDayContent(content)) {\n          dates.push(`${month}-${String(content.day).padStart(2, '0')}`);\n        }\n      });\n      \n      setAvailableDates(dates.sort());\n      \n      // Set first available date as selected\n      if (dates.length > 0) {\n        setSelectedDate(dates[0]);\n      }\n      \n      setSelectedCategory('Ï†ÑÏ≤¥');\n    } catch (error) {\n      console.error('Error loading month data:', error);\n      setError(`Failed to load data for ${month}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleMonthChange = (month: string) => {\n    if (pastMonths.includes(month)) {\n      handlePastMonthChange(month);\n    } else {\n      handlePresentMonthChange(month);\n    }\n  };\n\n  const handleDateChange = (date: string) => {\n    setSelectedDate(date);\n    setSelectedCategory('Ï†ÑÏ≤¥');\n  };\n\n  const handleCategoryChange = (category: string) => {\n    setSelectedCategory(category);\n  };\n\n  // Get sentences for display\n  const getDisplaySentences = (): ContentSection[] => {\n    if (!sentenceData) return [];\n\n    const sections: ContentSection[] = [];\n    \n    // Find the content for the selected date\n    const selectedDay = selectedDate ? parseInt(selectedDate.split('-')[2]) : 1;\n    \n    sentenceData.contents.forEach(content => {\n      if (isDateBasedContent(content) && content.date === selectedDate) {\n        // Old date-based format\n        content.sentences.forEach(sentence => {\n          sections.push({ type: 'sentence', sentence });\n        });\n      } else if (isDayContent(content) && content.day === selectedDay) {\n        // New day-based format with categories\n        content.content.forEach(categoryContent => {\n          if (selectedCategory === 'Ï†ÑÏ≤¥' || categoryContent.category === selectedCategory) {\n            categoryContent.subcategories.forEach(subcategory => {\n              if (subcategory.subcategory) {\n                sections.push({ \n                  type: 'divider', \n                  dividerText: subcategory.subcategory \n                });\n              }\n              subcategory.sentences.forEach(sentence => {\n                sections.push({ type: 'sentence', sentence });\n              });\n            });\n          }\n        });\n      } else if (isCategoryContent(content)) {\n        // Category-based format\n        if (selectedCategory === 'Ï†ÑÏ≤¥' || content.category === selectedCategory) {\n          content.subcategories.forEach(subcategory => {\n            if (subcategory.subcategory) {\n              sections.push({ \n                type: 'divider', \n                dividerText: subcategory.subcategory \n              });\n            }\n            subcategory.sentences.forEach(sentence => {\n              sections.push({ type: 'sentence', sentence });\n            });\n          });\n        }\n      }\n    });\n\n    return sections;\n  };\n\n  const displaySections = getDisplaySentences();\n\n  return (\n    <div className={`app ${isDarkMode ? 'dark-mode' : ''}`}>\n      {/* Header */}\n      <header className=\"app-header\">\n        <div className=\"header-title\">\n          <button onClick={onBackClick} className=\"back-button\">\n            ‚Üê Îí§Î°úÍ∞ÄÍ∏∞\n          </button>\n          <h1>Ï§ëÍµ≠Ïñ¥ ÌïôÏäµ Ïï± (Í∏∞Ï°¥ UI)</h1>\n          <button\n            className=\"theme-toggle\"\n            onClick={() => setIsDarkMode(!isDarkMode)}\n            title={isDarkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'}\n          >\n            {isDarkMode ? '‚òÄÔ∏è' : 'üåô'}\n          </button>\n        </div>\n        <div className=\"date-info\">\n          {selectedMonth && `${selectedMonth.replace('-', 'ÎÖÑ ')}Ïõî`}\n        </div>\n      </header>\n\n      {/* Navigation */}\n      <Navigation\n        availableDates={availableDates}\n        pastMonths={pastMonths}\n        presentMonths={presentMonths}\n        selectedMonth={selectedMonth}\n        selectedDate={selectedDate}\n        selectedCategory={selectedCategory}\n        sentenceData={sentenceData}\n        lastSelectedFolder={lastSelectedFolder}\n        lastSelectedMonth={lastSelectedMonth}\n        onMonthChange={handleMonthChange}\n        onDateChange={handleDateChange}\n        onCategoryChange={handleCategoryChange}\n        onPastMonthChange={handlePastMonthChange}\n        onPresentMonthChange={handlePresentMonthChange}\n      />\n\n      {/* Content */}\n      <main className=\"content\">\n        {loading && (\n          <div className=\"loading\">Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</div>\n        )}\n        \n        {error && (\n          <div className=\"error\">\n            <h2>Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§</h2>\n            <p>{error}</p>\n          </div>\n        )}\n        \n        {!loading && !error && (\n          <div className=\"content-container\">\n            {displaySections.length === 0 ? (\n              <div className=\"loading\">ÏÑ†ÌÉùÎêú ÎÇ†ÏßúÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.</div>\n            ) : (\n              displaySections.map((section, index) => (\n                section.type === 'divider' ? (\n                  <div key={index} className=\"subcategory-divider\">\n                    <h3>{section.dividerText}</h3>\n                  </div>\n                ) : (\n                  <SentenceCard \n                    key={`${section.sentence?.id}-${index}`} \n                    sentence={section.sentence!} \n                  />\n                )\n              ))\n            )}\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default LegacyApp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}