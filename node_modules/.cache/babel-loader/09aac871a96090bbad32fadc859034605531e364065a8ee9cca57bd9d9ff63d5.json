{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\chinesestudy\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Navigation from './components/Navigation';\nimport SentenceCard from './components/SentenceCard';\nimport { isDateBasedContent, isCategoryContent } from './types';\nimport './styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [availableFiles, setAvailableFiles] = useState([]);\n  const [pastMonths, setPastMonths] = useState([]);\n  const [selectedMonth, setSelectedMonth] = useState('2025-08');\n  const [selectedDate, setSelectedDate] = useState('2025-08-07');\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [selectedSubcategory, setSelectedSubcategory] = useState('');\n  const [sentenceData, setSentenceData] = useState(null);\n  const [sentences, setSentences] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    const saved = localStorage.getItem('isDarkMode');\n    return saved ? JSON.parse(saved) : false;\n  });\n  const [isDateBased, setIsDateBased] = useState(false);\n\n  // 과거 월 목록 로드\n  useEffect(() => {\n    const loadPastMonths = async () => {\n      try {\n        // manifest.json에서 과거 파일 목록 가져오기\n        const manifestResponse = await fetch('/data/past/manifest.json');\n        if (manifestResponse.ok) {\n          const manifest = await manifestResponse.json();\n          const files = manifest.files || [];\n\n          // 파일명에서 월 정보 추출 (past202201.json -> 2022-01)\n          const months = files.map(filename => {\n            const match = filename.match(/past(\\d{4})(\\d{2})\\.json/);\n            if (match) {\n              return `${match[1]}-${match[2]}`;\n            }\n            return null;\n          }).filter(Boolean);\n          setPastMonths(months);\n          console.log('Past months loaded:', months);\n        }\n      } catch (err) {\n        console.error('Error loading past months:', err);\n        // Fallback: 직접 시도해보기\n        try {\n          const testFile = await fetch('/data/past/past202201.json');\n          if (testFile.ok) {\n            setPastMonths(['2022-01']); // 최소한 하나는 있음을 확인\n          }\n        } catch (e) {\n          console.error('No past files found');\n        }\n      }\n    };\n    loadPastMonths();\n  }, []);\n\n  // 초기 데이터 로드\n  useEffect(() => {\n    const loadInitialData = async () => {\n      setLoading(true);\n      setError('');\n      try {\n        console.log('Fetching data from /data/sentences202508.json');\n        const response = await fetch('/data/sentences202508.json');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Data loaded successfully:', data);\n        console.log('Contents array:', data.contents);\n        if (!data || !data.contents || !Array.isArray(data.contents) || data.contents.length === 0) {\n          throw new Error('Invalid data structure');\n        }\n        setSentenceData(data);\n\n        // Check if data is date-based or category-based\n        const firstContent = data.contents[0];\n        if (isDateBasedContent(firstContent)) {\n          // Date-based structure (old format)\n          setIsDateBased(true);\n          console.log('Date-based structure detected');\n          setSentences(firstContent.sentences);\n          const actualDates = data.contents.filter(isDateBasedContent).map(content => content.date);\n          console.log('Actual dates from JSON:', actualDates);\n          setAvailableFiles(actualDates);\n          if (actualDates.length > 0) {\n            const firstDate = actualDates[0];\n            const month = firstDate.substring(0, 7);\n            setSelectedMonth(month);\n            setSelectedDate(firstDate);\n          }\n        } else if (isCategoryContent(firstContent)) {\n          // Category-based structure (new format)\n          setIsDateBased(false);\n          console.log('Category-based structure detected');\n          setSelectedCategory(firstContent.category);\n          if (firstContent.subcategories.length > 0) {\n            const firstSubcat = firstContent.subcategories[0];\n            setSelectedSubcategory(firstSubcat.subcategory);\n            setSentences(firstSubcat.sentences);\n          }\n        }\n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err instanceof Error ? err.message : '데이터를 불러올 수 없습니다.');\n        setSentences([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadInitialData();\n  }, []);\n\n  // 월 변경 핸들러\n  const handleMonthChange = month => {\n    console.log('Month changed to:', month);\n    setSelectedMonth(month);\n\n    // 해당 월의 첫 번째 날짜 선택\n    const monthDates = availableFiles.filter(date => date.startsWith(month));\n    if (monthDates.length > 0) {\n      setSelectedDate(monthDates[0]);\n      // 여기서 새로운 데이터를 로드해야 함 (현재는 2025-08만 있음)\n    }\n  };\n\n  // 과거 월 선택 핸들러\n  const handlePastMonthChange = async month => {\n    console.log('Past month selected:', month);\n    setLoading(true);\n    setError('');\n    try {\n      // 과거 폴더에서 데이터 로드 (past202201.json 형식)\n      const monthCode = month.replace('-', '');\n      const response = await fetch(`/data/past/past${monthCode}.json`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Past data loaded successfully:', data);\n      if (!data || !data.contents || !Array.isArray(data.contents) || data.contents.length === 0) {\n        throw new Error('Invalid data structure');\n      }\n      setSentenceData(data);\n\n      // Check format and set initial data\n      const firstContent = data.contents[0];\n      if (isDateBasedContent(firstContent)) {\n        setIsDateBased(true);\n        setSentences(firstContent.sentences);\n        const actualDates = data.contents.filter(isDateBasedContent).map(content => content.date);\n        setAvailableFiles(actualDates);\n        if (actualDates.length > 0) {\n          setSelectedMonth(month);\n          setSelectedDate(actualDates[0]);\n        }\n      } else if (isCategoryContent(firstContent)) {\n        setIsDateBased(false);\n        setSelectedCategory(firstContent.category);\n        if (firstContent.subcategories.length > 0) {\n          const firstSubcat = firstContent.subcategories[0];\n          setSelectedSubcategory(firstSubcat.subcategory);\n          setSentences(firstSubcat.sentences);\n        }\n      }\n    } catch (err) {\n      console.error('Error loading past data:', err);\n      setError(err instanceof Error ? err.message : '과거 데이터를 불러올 수 없습니다.');\n      setSentences([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 카테고리 변경 핸들러\n  const handleCategoryChange = category => {\n    console.log('Category changed to:', category);\n    setSelectedCategory(category);\n    if (sentenceData && sentenceData.contents) {\n      const categoryData = sentenceData.contents.filter(isCategoryContent).find(content => content.category === category);\n      if (categoryData && categoryData.subcategories.length > 0) {\n        const firstSubcat = categoryData.subcategories[0];\n        setSelectedSubcategory(firstSubcat.subcategory);\n        setSentences(firstSubcat.sentences);\n      }\n    }\n  };\n\n  // 서브카테고리 변경 핸들러\n  const handleSubcategoryChange = subcategory => {\n    console.log('Subcategory changed to:', subcategory);\n    setSelectedSubcategory(subcategory);\n    if (sentenceData && sentenceData.contents) {\n      const categoryData = sentenceData.contents.filter(isCategoryContent).find(content => content.category === selectedCategory);\n      if (categoryData) {\n        const subcatData = categoryData.subcategories.find(subcat => subcat.subcategory === subcategory);\n        if (subcatData) {\n          setSentences(subcatData.sentences);\n        }\n      }\n    }\n  };\n\n  // 날짜 변경 핸들러\n  const handleDateChange = date => {\n    console.log('Date changed to:', date);\n    setSelectedDate(date);\n\n    // 선택된 날짜에 해당하는 문장 데이터 찾기\n    if (sentenceData && sentenceData.contents) {\n      const selectedDateData = sentenceData.contents.filter(isDateBasedContent).find(content => content.date === date);\n      if (selectedDateData) {\n        console.log('Found data for date:', date, selectedDateData);\n        setSentences(selectedDateData.sentences);\n      } else {\n        console.log('No data found for date:', date);\n        setSentences([]);\n      }\n    }\n  };\n\n  // 다크 모드 토글\n  const toggleDarkMode = () => {\n    const newMode = !isDarkMode;\n    setIsDarkMode(newMode);\n    localStorage.setItem('isDarkMode', JSON.stringify(newMode));\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uC624\\uB958 \\uBC1C\\uC0DD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uBE0C\\uB77C\\uC6B0\\uC800 \\uCF58\\uC194(F12)\\uC744 \\uD655\\uC778\\uD574\\uC8FC\\uC138\\uC694.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${isDarkMode ? 'dark-mode' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\uC9C4\\uCC28\\uC774\\uB9B0 \\uC911\\uAD6D\\uC5B4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"theme-toggle\",\n          onClick: toggleDarkMode,\n          title: isDarkMode ? \"라이트 모드로 변경\" : \"다크 모드로 변경\",\n          children: isDarkMode ? '☀️' : '💡'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), (availableFiles.length > 0 || sentenceData) && /*#__PURE__*/_jsxDEV(Navigation, {\n      availableDates: availableFiles,\n      pastMonths: pastMonths,\n      selectedMonth: selectedMonth,\n      selectedDate: selectedDate,\n      selectedCategory: selectedCategory,\n      selectedSubcategory: selectedSubcategory,\n      sentenceData: sentenceData,\n      isDateBased: isDateBased,\n      onMonthChange: handleMonthChange,\n      onDateChange: handleDateChange,\n      onCategoryChange: handleCategoryChange,\n      onSubcategoryChange: handleSubcategoryChange,\n      onPastMonthChange: handlePastMonthChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"content\",\n      children: sentences.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sentences-container\",\n        children: sentences.map(sentence => /*#__PURE__*/_jsxDEV(SentenceCard, {\n          sentence: sentence\n        }, sentence.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uB370\\uC774\\uD130 \\uC5C6\\uC74C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD45C\\uC2DC\\uD560 \\uBB38\\uC7A5\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"1RBajlQColVOiVAHgWaRvFiwr4Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navigation","SentenceCard","isDateBasedContent","isCategoryContent","jsxDEV","_jsxDEV","App","_s","availableFiles","setAvailableFiles","pastMonths","setPastMonths","selectedMonth","setSelectedMonth","selectedDate","setSelectedDate","selectedCategory","setSelectedCategory","selectedSubcategory","setSelectedSubcategory","sentenceData","setSentenceData","sentences","setSentences","loading","setLoading","error","setError","isDarkMode","setIsDarkMode","saved","localStorage","getItem","JSON","parse","isDateBased","setIsDateBased","loadPastMonths","manifestResponse","fetch","ok","manifest","json","files","months","map","filename","match","filter","Boolean","console","log","err","testFile","e","loadInitialData","response","Error","status","data","contents","Array","isArray","length","firstContent","actualDates","content","date","firstDate","month","substring","category","subcategories","firstSubcat","subcategory","message","handleMonthChange","monthDates","startsWith","handlePastMonthChange","monthCode","replace","handleCategoryChange","categoryData","find","handleSubcategoryChange","subcatData","subcat","handleDateChange","selectedDateData","toggleDarkMode","newMode","setItem","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","title","availableDates","onMonthChange","onDateChange","onCategoryChange","onSubcategoryChange","onPastMonthChange","sentence","id","_c","$RefreshReg$"],"sources":["D:/Coding/chinesestudy/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Navigation from './components/Navigation';\nimport SentenceCard from './components/SentenceCard';\nimport { SentenceData, Sentence, isDateBasedContent, isCategoryContent } from './types';\nimport './styles/App.css';\n\nconst App: React.FC = () => {\n  const [availableFiles, setAvailableFiles] = useState<string[]>([]);\n  const [pastMonths, setPastMonths] = useState<string[]>([]);\n  const [selectedMonth, setSelectedMonth] = useState<string>('2025-08');\n  const [selectedDate, setSelectedDate] = useState<string>('2025-08-07');\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [selectedSubcategory, setSelectedSubcategory] = useState<string>('');\n  const [sentenceData, setSentenceData] = useState<SentenceData | null>(null);\n  const [sentences, setSentences] = useState<Sentence[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string>('');\n  const [isDarkMode, setIsDarkMode] = useState<boolean>(() => {\n    const saved = localStorage.getItem('isDarkMode');\n    return saved ? JSON.parse(saved) : false;\n  });\n  const [isDateBased, setIsDateBased] = useState<boolean>(false);\n\n  // 과거 월 목록 로드\n  useEffect(() => {\n    const loadPastMonths = async () => {\n      try {\n        // manifest.json에서 과거 파일 목록 가져오기\n        const manifestResponse = await fetch('/data/past/manifest.json');\n        if (manifestResponse.ok) {\n          const manifest = await manifestResponse.json();\n          const files = manifest.files || [];\n          \n          // 파일명에서 월 정보 추출 (past202201.json -> 2022-01)\n          const months = files.map((filename: string) => {\n            const match = filename.match(/past(\\d{4})(\\d{2})\\.json/);\n            if (match) {\n              return `${match[1]}-${match[2]}`;\n            }\n            return null;\n          }).filter(Boolean);\n          \n          setPastMonths(months);\n          console.log('Past months loaded:', months);\n        }\n      } catch (err) {\n        console.error('Error loading past months:', err);\n        // Fallback: 직접 시도해보기\n        try {\n          const testFile = await fetch('/data/past/past202201.json');\n          if (testFile.ok) {\n            setPastMonths(['2022-01']); // 최소한 하나는 있음을 확인\n          }\n        } catch (e) {\n          console.error('No past files found');\n        }\n      }\n    };\n    loadPastMonths();\n  }, []);\n\n  // 초기 데이터 로드\n  useEffect(() => {\n    const loadInitialData = async () => {\n      setLoading(true);\n      setError('');\n      \n      try {\n        console.log('Fetching data from /data/sentences202508.json');\n        const response = await fetch('/data/sentences202508.json');\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data: SentenceData = await response.json();\n        console.log('Data loaded successfully:', data);\n        console.log('Contents array:', data.contents);\n        \n        if (!data || !data.contents || !Array.isArray(data.contents) || data.contents.length === 0) {\n          throw new Error('Invalid data structure');\n        }\n        \n        setSentenceData(data);\n        \n        // Check if data is date-based or category-based\n        const firstContent = data.contents[0];\n        if (isDateBasedContent(firstContent)) {\n          // Date-based structure (old format)\n          setIsDateBased(true);\n          console.log('Date-based structure detected');\n          setSentences(firstContent.sentences);\n          \n          const actualDates = data.contents\n            .filter(isDateBasedContent)\n            .map(content => content.date);\n          console.log('Actual dates from JSON:', actualDates);\n          \n          setAvailableFiles(actualDates);\n          if (actualDates.length > 0) {\n            const firstDate = actualDates[0];\n            const month = firstDate.substring(0, 7);\n            setSelectedMonth(month);\n            setSelectedDate(firstDate);\n          }\n        } else if (isCategoryContent(firstContent)) {\n          // Category-based structure (new format)\n          setIsDateBased(false);\n          console.log('Category-based structure detected');\n          setSelectedCategory(firstContent.category);\n          \n          if (firstContent.subcategories.length > 0) {\n            const firstSubcat = firstContent.subcategories[0];\n            setSelectedSubcategory(firstSubcat.subcategory);\n            setSentences(firstSubcat.sentences);\n          }\n        }\n        \n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err instanceof Error ? err.message : '데이터를 불러올 수 없습니다.');\n        setSentences([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadInitialData();\n  }, []);\n\n  // 월 변경 핸들러\n  const handleMonthChange = (month: string) => {\n    console.log('Month changed to:', month);\n    setSelectedMonth(month);\n    \n    // 해당 월의 첫 번째 날짜 선택\n    const monthDates = availableFiles.filter(date => date.startsWith(month));\n    if (monthDates.length > 0) {\n      setSelectedDate(monthDates[0]);\n      // 여기서 새로운 데이터를 로드해야 함 (현재는 2025-08만 있음)\n    }\n  };\n\n  // 과거 월 선택 핸들러\n  const handlePastMonthChange = async (month: string) => {\n    console.log('Past month selected:', month);\n    setLoading(true);\n    setError('');\n    \n    try {\n      // 과거 폴더에서 데이터 로드 (past202201.json 형식)\n      const monthCode = month.replace('-', '');\n      const response = await fetch(`/data/past/past${monthCode}.json`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data: SentenceData = await response.json();\n      console.log('Past data loaded successfully:', data);\n      \n      if (!data || !data.contents || !Array.isArray(data.contents) || data.contents.length === 0) {\n        throw new Error('Invalid data structure');\n      }\n      \n      setSentenceData(data);\n      \n      // Check format and set initial data\n      const firstContent = data.contents[0];\n      if (isDateBasedContent(firstContent)) {\n        setIsDateBased(true);\n        setSentences(firstContent.sentences);\n        const actualDates = data.contents\n          .filter(isDateBasedContent)\n          .map(content => content.date);\n        setAvailableFiles(actualDates);\n        if (actualDates.length > 0) {\n          setSelectedMonth(month);\n          setSelectedDate(actualDates[0]);\n        }\n      } else if (isCategoryContent(firstContent)) {\n        setIsDateBased(false);\n        setSelectedCategory(firstContent.category);\n        if (firstContent.subcategories.length > 0) {\n          const firstSubcat = firstContent.subcategories[0];\n          setSelectedSubcategory(firstSubcat.subcategory);\n          setSentences(firstSubcat.sentences);\n        }\n      }\n    } catch (err) {\n      console.error('Error loading past data:', err);\n      setError(err instanceof Error ? err.message : '과거 데이터를 불러올 수 없습니다.');\n      setSentences([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 카테고리 변경 핸들러\n  const handleCategoryChange = (category: string) => {\n    console.log('Category changed to:', category);\n    setSelectedCategory(category);\n    \n    if (sentenceData && sentenceData.contents) {\n      const categoryData = sentenceData.contents\n        .filter(isCategoryContent)\n        .find(content => content.category === category);\n      \n      if (categoryData && categoryData.subcategories.length > 0) {\n        const firstSubcat = categoryData.subcategories[0];\n        setSelectedSubcategory(firstSubcat.subcategory);\n        setSentences(firstSubcat.sentences);\n      }\n    }\n  };\n\n  // 서브카테고리 변경 핸들러\n  const handleSubcategoryChange = (subcategory: string) => {\n    console.log('Subcategory changed to:', subcategory);\n    setSelectedSubcategory(subcategory);\n    \n    if (sentenceData && sentenceData.contents) {\n      const categoryData = sentenceData.contents\n        .filter(isCategoryContent)\n        .find(content => content.category === selectedCategory);\n      \n      if (categoryData) {\n        const subcatData = categoryData.subcategories.find(\n          subcat => subcat.subcategory === subcategory\n        );\n        if (subcatData) {\n          setSentences(subcatData.sentences);\n        }\n      }\n    }\n  };\n\n  // 날짜 변경 핸들러\n  const handleDateChange = (date: string) => {\n    console.log('Date changed to:', date);\n    setSelectedDate(date);\n    \n    // 선택된 날짜에 해당하는 문장 데이터 찾기\n    if (sentenceData && sentenceData.contents) {\n      const selectedDateData = sentenceData.contents\n        .filter(isDateBasedContent)\n        .find(content => content.date === date);\n      if (selectedDateData) {\n        console.log('Found data for date:', date, selectedDateData);\n        setSentences(selectedDateData.sentences);\n      } else {\n        console.log('No data found for date:', date);\n        setSentences([]);\n      }\n    }\n  };\n\n\n  // 다크 모드 토글\n  const toggleDarkMode = () => {\n    const newMode = !isDarkMode;\n    setIsDarkMode(newMode);\n    localStorage.setItem('isDarkMode', JSON.stringify(newMode));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"app\">\n        <div className=\"loading\">데이터를 불러오는 중...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"app\">\n        <div className=\"error\">\n          <h2>오류 발생</h2>\n          <p>{error}</p>\n          <p>브라우저 콘솔(F12)을 확인해주세요.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`app ${isDarkMode ? 'dark-mode' : ''}`}>\n      <header className=\"app-header\">\n        <div className=\"header-title\">\n          <h1>진차이린 중국어</h1>\n          <button \n            type=\"button\"\n            className=\"theme-toggle\" \n            onClick={toggleDarkMode}\n            title={isDarkMode ? \"라이트 모드로 변경\" : \"다크 모드로 변경\"}\n          >\n            {isDarkMode ? '☀️' : '💡'}\n          </button>\n        </div>\n        {/* <div className=\"date-info\">{formatDateDisplay()}</div> */}\n      </header>\n\n      {(availableFiles.length > 0 || sentenceData) && (\n        <Navigation\n          availableDates={availableFiles}\n          pastMonths={pastMonths}\n          selectedMonth={selectedMonth}\n          selectedDate={selectedDate}\n          selectedCategory={selectedCategory}\n          selectedSubcategory={selectedSubcategory}\n          sentenceData={sentenceData}\n          isDateBased={isDateBased}\n          onMonthChange={handleMonthChange}\n          onDateChange={handleDateChange}\n          onCategoryChange={handleCategoryChange}\n          onSubcategoryChange={handleSubcategoryChange}\n          onPastMonthChange={handlePastMonthChange}\n        />\n      )}\n\n      <main className=\"content\">\n        {sentences.length > 0 ? (\n          <div className=\"sentences-container\">\n            {sentences.map((sentence) => (\n              <SentenceCard key={sentence.id} sentence={sentence} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"error\">\n            <h2>데이터 없음</h2>\n            <p>표시할 문장이 없습니다.</p>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,SAAiCC,kBAAkB,EAAEC,iBAAiB,QAAQ,SAAS;AACvF,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAW,EAAE,CAAC;EAClE,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAW,EAAE,CAAC;EAC1D,MAAM,CAACc,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAS,SAAS,CAAC;EACrE,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAS,YAAY,CAAC;EACtE,MAAM,CAACkB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnB,QAAQ,CAAS,EAAE,CAAC;EACpE,MAAM,CAACoB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGrB,QAAQ,CAAS,EAAE,CAAC;EAC1E,MAAM,CAACsB,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAsB,IAAI,CAAC;EAC3E,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAa,EAAE,CAAC;EAC1D,MAAM,CAAC0B,OAAO,EAAEC,UAAU,CAAC,GAAG3B,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAAC4B,KAAK,EAAEC,QAAQ,CAAC,GAAG7B,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAAC8B,UAAU,EAAEC,aAAa,CAAC,GAAG/B,QAAQ,CAAU,MAAM;IAC1D,MAAMgC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAChD,OAAOF,KAAK,GAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,GAAG,KAAK;EAC1C,CAAC,CAAC;EACF,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGtC,QAAQ,CAAU,KAAK,CAAC;;EAE9D;EACAC,SAAS,CAAC,MAAM;IACd,MAAMsC,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF;QACA,MAAMC,gBAAgB,GAAG,MAAMC,KAAK,CAAC,0BAA0B,CAAC;QAChE,IAAID,gBAAgB,CAACE,EAAE,EAAE;UACvB,MAAMC,QAAQ,GAAG,MAAMH,gBAAgB,CAACI,IAAI,CAAC,CAAC;UAC9C,MAAMC,KAAK,GAAGF,QAAQ,CAACE,KAAK,IAAI,EAAE;;UAElC;UACA,MAAMC,MAAM,GAAGD,KAAK,CAACE,GAAG,CAAEC,QAAgB,IAAK;YAC7C,MAAMC,KAAK,GAAGD,QAAQ,CAACC,KAAK,CAAC,0BAA0B,CAAC;YACxD,IAAIA,KAAK,EAAE;cACT,OAAO,GAAGA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;YAClC;YACA,OAAO,IAAI;UACb,CAAC,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;UAElBtC,aAAa,CAACiC,MAAM,CAAC;UACrBM,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEP,MAAM,CAAC;QAC5C;MACF,CAAC,CAAC,OAAOQ,GAAG,EAAE;QACZF,OAAO,CAACxB,KAAK,CAAC,4BAA4B,EAAE0B,GAAG,CAAC;QAChD;QACA,IAAI;UACF,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAAC,4BAA4B,CAAC;UAC1D,IAAIc,QAAQ,CAACb,EAAE,EAAE;YACf7B,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;UAC9B;QACF,CAAC,CAAC,OAAO2C,CAAC,EAAE;UACVJ,OAAO,CAACxB,KAAK,CAAC,qBAAqB,CAAC;QACtC;MACF;IACF,CAAC;IACDW,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAtC,SAAS,CAAC,MAAM;IACd,MAAMwD,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC9B,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,EAAE,CAAC;MAEZ,IAAI;QACFuB,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;QAC5D,MAAMK,QAAQ,GAAG,MAAMjB,KAAK,CAAC,4BAA4B,CAAC;QAE1D,IAAI,CAACiB,QAAQ,CAAChB,EAAE,EAAE;UAChB,MAAM,IAAIiB,KAAK,CAAC,uBAAuBD,QAAQ,CAACE,MAAM,EAAE,CAAC;QAC3D;QAEA,MAAMC,IAAkB,GAAG,MAAMH,QAAQ,CAACd,IAAI,CAAC,CAAC;QAChDQ,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEQ,IAAI,CAAC;QAC9CT,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEQ,IAAI,CAACC,QAAQ,CAAC;QAE7C,IAAI,CAACD,IAAI,IAAI,CAACA,IAAI,CAACC,QAAQ,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,IAAI,CAACC,QAAQ,CAAC,IAAID,IAAI,CAACC,QAAQ,CAACG,MAAM,KAAK,CAAC,EAAE;UAC1F,MAAM,IAAIN,KAAK,CAAC,wBAAwB,CAAC;QAC3C;QAEApC,eAAe,CAACsC,IAAI,CAAC;;QAErB;QACA,MAAMK,YAAY,GAAGL,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;QACrC,IAAI1D,kBAAkB,CAAC8D,YAAY,CAAC,EAAE;UACpC;UACA5B,cAAc,CAAC,IAAI,CAAC;UACpBc,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;UAC5C5B,YAAY,CAACyC,YAAY,CAAC1C,SAAS,CAAC;UAEpC,MAAM2C,WAAW,GAAGN,IAAI,CAACC,QAAQ,CAC9BZ,MAAM,CAAC9C,kBAAkB,CAAC,CAC1B2C,GAAG,CAACqB,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC;UAC/BjB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEc,WAAW,CAAC;UAEnDxD,iBAAiB,CAACwD,WAAW,CAAC;UAC9B,IAAIA,WAAW,CAACF,MAAM,GAAG,CAAC,EAAE;YAC1B,MAAMK,SAAS,GAAGH,WAAW,CAAC,CAAC,CAAC;YAChC,MAAMI,KAAK,GAAGD,SAAS,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;YACvCzD,gBAAgB,CAACwD,KAAK,CAAC;YACvBtD,eAAe,CAACqD,SAAS,CAAC;UAC5B;QACF,CAAC,MAAM,IAAIjE,iBAAiB,CAAC6D,YAAY,CAAC,EAAE;UAC1C;UACA5B,cAAc,CAAC,KAAK,CAAC;UACrBc,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;UAChDlC,mBAAmB,CAAC+C,YAAY,CAACO,QAAQ,CAAC;UAE1C,IAAIP,YAAY,CAACQ,aAAa,CAACT,MAAM,GAAG,CAAC,EAAE;YACzC,MAAMU,WAAW,GAAGT,YAAY,CAACQ,aAAa,CAAC,CAAC,CAAC;YACjDrD,sBAAsB,CAACsD,WAAW,CAACC,WAAW,CAAC;YAC/CnD,YAAY,CAACkD,WAAW,CAACnD,SAAS,CAAC;UACrC;QACF;MAEF,CAAC,CAAC,OAAO8B,GAAG,EAAE;QACZF,OAAO,CAACxB,KAAK,CAAC,qBAAqB,EAAE0B,GAAG,CAAC;QACzCzB,QAAQ,CAACyB,GAAG,YAAYK,KAAK,GAAGL,GAAG,CAACuB,OAAO,GAAG,kBAAkB,CAAC;QACjEpD,YAAY,CAAC,EAAE,CAAC;MAClB,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAED8B,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMqB,iBAAiB,GAAIP,KAAa,IAAK;IAC3CnB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEkB,KAAK,CAAC;IACvCxD,gBAAgB,CAACwD,KAAK,CAAC;;IAEvB;IACA,MAAMQ,UAAU,GAAGrE,cAAc,CAACwC,MAAM,CAACmB,IAAI,IAAIA,IAAI,CAACW,UAAU,CAACT,KAAK,CAAC,CAAC;IACxE,IAAIQ,UAAU,CAACd,MAAM,GAAG,CAAC,EAAE;MACzBhD,eAAe,CAAC8D,UAAU,CAAC,CAAC,CAAC,CAAC;MAC9B;IACF;EACF,CAAC;;EAED;EACA,MAAME,qBAAqB,GAAG,MAAOV,KAAa,IAAK;IACrDnB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEkB,KAAK,CAAC;IAC1C5C,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACF;MACA,MAAMqD,SAAS,GAAGX,KAAK,CAACY,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;MACxC,MAAMzB,QAAQ,GAAG,MAAMjB,KAAK,CAAC,kBAAkByC,SAAS,OAAO,CAAC;MAEhE,IAAI,CAACxB,QAAQ,CAAChB,EAAE,EAAE;QAChB,MAAM,IAAIiB,KAAK,CAAC,uBAAuBD,QAAQ,CAACE,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAkB,GAAG,MAAMH,QAAQ,CAACd,IAAI,CAAC,CAAC;MAChDQ,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEQ,IAAI,CAAC;MAEnD,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACC,QAAQ,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,IAAI,CAACC,QAAQ,CAAC,IAAID,IAAI,CAACC,QAAQ,CAACG,MAAM,KAAK,CAAC,EAAE;QAC1F,MAAM,IAAIN,KAAK,CAAC,wBAAwB,CAAC;MAC3C;MAEApC,eAAe,CAACsC,IAAI,CAAC;;MAErB;MACA,MAAMK,YAAY,GAAGL,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;MACrC,IAAI1D,kBAAkB,CAAC8D,YAAY,CAAC,EAAE;QACpC5B,cAAc,CAAC,IAAI,CAAC;QACpBb,YAAY,CAACyC,YAAY,CAAC1C,SAAS,CAAC;QACpC,MAAM2C,WAAW,GAAGN,IAAI,CAACC,QAAQ,CAC9BZ,MAAM,CAAC9C,kBAAkB,CAAC,CAC1B2C,GAAG,CAACqB,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC;QAC/B1D,iBAAiB,CAACwD,WAAW,CAAC;QAC9B,IAAIA,WAAW,CAACF,MAAM,GAAG,CAAC,EAAE;UAC1BlD,gBAAgB,CAACwD,KAAK,CAAC;UACvBtD,eAAe,CAACkD,WAAW,CAAC,CAAC,CAAC,CAAC;QACjC;MACF,CAAC,MAAM,IAAI9D,iBAAiB,CAAC6D,YAAY,CAAC,EAAE;QAC1C5B,cAAc,CAAC,KAAK,CAAC;QACrBnB,mBAAmB,CAAC+C,YAAY,CAACO,QAAQ,CAAC;QAC1C,IAAIP,YAAY,CAACQ,aAAa,CAACT,MAAM,GAAG,CAAC,EAAE;UACzC,MAAMU,WAAW,GAAGT,YAAY,CAACQ,aAAa,CAAC,CAAC,CAAC;UACjDrD,sBAAsB,CAACsD,WAAW,CAACC,WAAW,CAAC;UAC/CnD,YAAY,CAACkD,WAAW,CAACnD,SAAS,CAAC;QACrC;MACF;IACF,CAAC,CAAC,OAAO8B,GAAG,EAAE;MACZF,OAAO,CAACxB,KAAK,CAAC,0BAA0B,EAAE0B,GAAG,CAAC;MAC9CzB,QAAQ,CAACyB,GAAG,YAAYK,KAAK,GAAGL,GAAG,CAACuB,OAAO,GAAG,qBAAqB,CAAC;MACpEpD,YAAY,CAAC,EAAE,CAAC;IAClB,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMyD,oBAAoB,GAAIX,QAAgB,IAAK;IACjDrB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEoB,QAAQ,CAAC;IAC7CtD,mBAAmB,CAACsD,QAAQ,CAAC;IAE7B,IAAInD,YAAY,IAAIA,YAAY,CAACwC,QAAQ,EAAE;MACzC,MAAMuB,YAAY,GAAG/D,YAAY,CAACwC,QAAQ,CACvCZ,MAAM,CAAC7C,iBAAiB,CAAC,CACzBiF,IAAI,CAAClB,OAAO,IAAIA,OAAO,CAACK,QAAQ,KAAKA,QAAQ,CAAC;MAEjD,IAAIY,YAAY,IAAIA,YAAY,CAACX,aAAa,CAACT,MAAM,GAAG,CAAC,EAAE;QACzD,MAAMU,WAAW,GAAGU,YAAY,CAACX,aAAa,CAAC,CAAC,CAAC;QACjDrD,sBAAsB,CAACsD,WAAW,CAACC,WAAW,CAAC;QAC/CnD,YAAY,CAACkD,WAAW,CAACnD,SAAS,CAAC;MACrC;IACF;EACF,CAAC;;EAED;EACA,MAAM+D,uBAAuB,GAAIX,WAAmB,IAAK;IACvDxB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEuB,WAAW,CAAC;IACnDvD,sBAAsB,CAACuD,WAAW,CAAC;IAEnC,IAAItD,YAAY,IAAIA,YAAY,CAACwC,QAAQ,EAAE;MACzC,MAAMuB,YAAY,GAAG/D,YAAY,CAACwC,QAAQ,CACvCZ,MAAM,CAAC7C,iBAAiB,CAAC,CACzBiF,IAAI,CAAClB,OAAO,IAAIA,OAAO,CAACK,QAAQ,KAAKvD,gBAAgB,CAAC;MAEzD,IAAImE,YAAY,EAAE;QAChB,MAAMG,UAAU,GAAGH,YAAY,CAACX,aAAa,CAACY,IAAI,CAChDG,MAAM,IAAIA,MAAM,CAACb,WAAW,KAAKA,WACnC,CAAC;QACD,IAAIY,UAAU,EAAE;UACd/D,YAAY,CAAC+D,UAAU,CAAChE,SAAS,CAAC;QACpC;MACF;IACF;EACF,CAAC;;EAED;EACA,MAAMkE,gBAAgB,GAAIrB,IAAY,IAAK;IACzCjB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEgB,IAAI,CAAC;IACrCpD,eAAe,CAACoD,IAAI,CAAC;;IAErB;IACA,IAAI/C,YAAY,IAAIA,YAAY,CAACwC,QAAQ,EAAE;MACzC,MAAM6B,gBAAgB,GAAGrE,YAAY,CAACwC,QAAQ,CAC3CZ,MAAM,CAAC9C,kBAAkB,CAAC,CAC1BkF,IAAI,CAAClB,OAAO,IAAIA,OAAO,CAACC,IAAI,KAAKA,IAAI,CAAC;MACzC,IAAIsB,gBAAgB,EAAE;QACpBvC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEgB,IAAI,EAAEsB,gBAAgB,CAAC;QAC3DlE,YAAY,CAACkE,gBAAgB,CAACnE,SAAS,CAAC;MAC1C,CAAC,MAAM;QACL4B,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEgB,IAAI,CAAC;QAC5C5C,YAAY,CAAC,EAAE,CAAC;MAClB;IACF;EACF,CAAC;;EAGD;EACA,MAAMmE,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,OAAO,GAAG,CAAC/D,UAAU;IAC3BC,aAAa,CAAC8D,OAAO,CAAC;IACtB5D,YAAY,CAAC6D,OAAO,CAAC,YAAY,EAAE3D,IAAI,CAAC4D,SAAS,CAACF,OAAO,CAAC,CAAC;EAC7D,CAAC;EAED,IAAInE,OAAO,EAAE;IACX,oBACEnB,OAAA;MAAKyF,SAAS,EAAC,KAAK;MAAAC,QAAA,eAClB1F,OAAA;QAAKyF,SAAS,EAAC,SAAS;QAAAC,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EAEV;EAEA,IAAIzE,KAAK,EAAE;IACT,oBACErB,OAAA;MAAKyF,SAAS,EAAC,KAAK;MAAAC,QAAA,eAClB1F,OAAA;QAAKyF,SAAS,EAAC,OAAO;QAAAC,QAAA,gBACpB1F,OAAA;UAAA0F,QAAA,EAAI;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACd9F,OAAA;UAAA0F,QAAA,EAAIrE;QAAK;UAAAsE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACd9F,OAAA;UAAA0F,QAAA,EAAG;QAAqB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;EAEA,oBACE9F,OAAA;IAAKyF,SAAS,EAAE,OAAOlE,UAAU,GAAG,WAAW,GAAG,EAAE,EAAG;IAAAmE,QAAA,gBACrD1F,OAAA;MAAQyF,SAAS,EAAC,YAAY;MAAAC,QAAA,eAC5B1F,OAAA;QAAKyF,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3B1F,OAAA;UAAA0F,QAAA,EAAI;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjB9F,OAAA;UACE+F,IAAI,EAAC,QAAQ;UACbN,SAAS,EAAC,cAAc;UACxBO,OAAO,EAAEX,cAAe;UACxBY,KAAK,EAAE1E,UAAU,GAAG,YAAY,GAAG,WAAY;UAAAmE,QAAA,EAE9CnE,UAAU,GAAG,IAAI,GAAG;QAAI;UAAAoE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEA,CAAC,EAER,CAAC3F,cAAc,CAACuD,MAAM,GAAG,CAAC,IAAI3C,YAAY,kBACzCf,OAAA,CAACL,UAAU;MACTuG,cAAc,EAAE/F,cAAe;MAC/BE,UAAU,EAAEA,UAAW;MACvBE,aAAa,EAAEA,aAAc;MAC7BE,YAAY,EAAEA,YAAa;MAC3BE,gBAAgB,EAAEA,gBAAiB;MACnCE,mBAAmB,EAAEA,mBAAoB;MACzCE,YAAY,EAAEA,YAAa;MAC3Be,WAAW,EAAEA,WAAY;MACzBqE,aAAa,EAAE5B,iBAAkB;MACjC6B,YAAY,EAAEjB,gBAAiB;MAC/BkB,gBAAgB,EAAExB,oBAAqB;MACvCyB,mBAAmB,EAAEtB,uBAAwB;MAC7CuB,iBAAiB,EAAE7B;IAAsB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CACF,eAED9F,OAAA;MAAMyF,SAAS,EAAC,SAAS;MAAAC,QAAA,EACtBzE,SAAS,CAACyC,MAAM,GAAG,CAAC,gBACnB1D,OAAA;QAAKyF,SAAS,EAAC,qBAAqB;QAAAC,QAAA,EACjCzE,SAAS,CAACuB,GAAG,CAAEgE,QAAQ,iBACtBxG,OAAA,CAACJ,YAAY;UAAmB4G,QAAQ,EAAEA;QAAS,GAAhCA,QAAQ,CAACC,EAAE;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAuB,CACtD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,gBAEN9F,OAAA;QAAKyF,SAAS,EAAC,OAAO;QAAAC,QAAA,gBACpB1F,OAAA;UAAA0F,QAAA,EAAI;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACf9F,OAAA;UAAA0F,QAAA,EAAG;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAC5F,EAAA,CA1UID,GAAa;AAAAyG,EAAA,GAAbzG,GAAa;AA4UnB,eAAeA,GAAG;AAAC,IAAAyG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}