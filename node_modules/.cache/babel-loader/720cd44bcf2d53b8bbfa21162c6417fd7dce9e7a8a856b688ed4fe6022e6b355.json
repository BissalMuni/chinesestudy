{"ast":null,"code":"import React,{useState,useEffect}from'react';import Navigation from'./components/Navigation';import SentenceCard from'./components/SentenceCard';import'./styles/App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[availableFiles,setAvailableFiles]=useState([]);const[selectedMonth,setSelectedMonth]=useState('2025-08');const[selectedDate,setSelectedDate]=useState('2025-08-07');const[sentenceData,setSentenceData]=useState(null);const[sentences,setSentences]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState('');const[isDarkMode,setIsDarkMode]=useState(()=>{const saved=localStorage.getItem('isDarkMode');return saved?JSON.parse(saved):false;});// 초기 데이터 로드\nuseEffect(()=>{const loadInitialData=async()=>{setLoading(true);setError('');try{console.log('Fetching data from /data/sentences202508.json');const response=await fetch('/data/sentences202508.json');if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();console.log('Data loaded successfully:',data);console.log('Contents array:',data.contents);if(!data||!data.contents||!Array.isArray(data.contents)||data.contents.length===0){throw new Error('Invalid data structure');}// 첫 번째 날짜의 문장들 가져오기\nconst firstDateData=data.contents[0];console.log('First date data:',firstDateData);console.log('Sentences:',firstDateData.sentences);setSentenceData(data);setSentences(firstDateData.sentences);// 실제 JSON 파일의 날짜들로 설정\nconst actualDates=data.contents.map(content=>content.date);console.log('Actual dates from JSON:',actualDates);setAvailableFiles(actualDates);if(actualDates.length>0){const firstDate=actualDates[0];const month=firstDate.substring(0,7);// 2025-08\nsetSelectedMonth(month);setSelectedDate(firstDate);}}catch(err){console.error('Error loading data:',err);setError(err instanceof Error?err.message:'데이터를 불러올 수 없습니다.');setSentences([]);}finally{setLoading(false);}};loadInitialData();},[]);// 월 변경 핸들러\nconst handleMonthChange=month=>{console.log('Month changed to:',month);setSelectedMonth(month);// 해당 월의 첫 번째 날짜 선택\nconst monthDates=availableFiles.filter(date=>date.startsWith(month));if(monthDates.length>0){setSelectedDate(monthDates[0]);// 여기서 새로운 데이터를 로드해야 함 (현재는 2025-08만 있음)\n}};// 날짜 변경 핸들러\nconst handleDateChange=date=>{console.log('Date changed to:',date);setSelectedDate(date);// 선택된 날짜에 해당하는 문장 데이터 찾기\nif(sentenceData&&sentenceData.contents){const selectedDateData=sentenceData.contents.find(content=>content.date===date);if(selectedDateData){console.log('Found data for date:',date,selectedDateData);setSentences(selectedDateData.sentences);}else{console.log('No data found for date:',date);setSentences([]);}}};// 다크 모드 토글\nconst toggleDarkMode=()=>{const newMode=!isDarkMode;setIsDarkMode(newMode);localStorage.setItem('isDarkMode',JSON.stringify(newMode));};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"app\",children:/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"})});}if(error){return/*#__PURE__*/_jsx(\"div\",{className:\"app\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"error\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uC624\\uB958 \\uBC1C\\uC0DD\"}),/*#__PURE__*/_jsx(\"p\",{children:error}),/*#__PURE__*/_jsx(\"p\",{children:\"\\uBE0C\\uB77C\\uC6B0\\uC800 \\uCF58\\uC194(F12)\\uC744 \\uD655\\uC778\\uD574\\uC8FC\\uC138\\uC694.\"})]})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"app \".concat(isDarkMode?'dark-mode':''),children:[/*#__PURE__*/_jsx(\"header\",{className:\"app-header\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"header-title\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\uC9C4\\uCC28\\uC774\\uB9B0 \\uC911\\uAD6D\\uC5B4\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"theme-toggle\",onClick:toggleDarkMode,title:isDarkMode?\"라이트 모드로 변경\":\"다크 모드로 변경\",children:isDarkMode?'☀️':'💡'})]})}),availableFiles.length>0&&/*#__PURE__*/_jsx(Navigation,{availableDates:availableFiles,selectedMonth:selectedMonth,selectedDate:selectedDate,onMonthChange:handleMonthChange,onDateChange:handleDateChange}),/*#__PURE__*/_jsx(\"main\",{className:\"content\",children:sentences.length>0?/*#__PURE__*/_jsx(\"div\",{className:\"sentences-container\",children:sentences.map(sentence=>/*#__PURE__*/_jsx(SentenceCard,{sentence:sentence},sentence.id))}):/*#__PURE__*/_jsxs(\"div\",{className:\"error\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uB370\\uC774\\uD130 \\uC5C6\\uC74C\"}),/*#__PURE__*/_jsx(\"p\",{children:\"\\uD45C\\uC2DC\\uD560 \\uBB38\\uC7A5\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"})]})})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","Navigation","SentenceCard","jsx","_jsx","jsxs","_jsxs","App","availableFiles","setAvailableFiles","selectedMonth","setSelectedMonth","selectedDate","setSelectedDate","sentenceData","setSentenceData","sentences","setSentences","loading","setLoading","error","setError","isDarkMode","setIsDarkMode","saved","localStorage","getItem","JSON","parse","loadInitialData","console","log","response","fetch","ok","Error","concat","status","data","json","contents","Array","isArray","length","firstDateData","actualDates","map","content","date","firstDate","month","substring","err","message","handleMonthChange","monthDates","filter","startsWith","handleDateChange","selectedDateData","find","toggleDarkMode","newMode","setItem","stringify","className","children","type","onClick","title","availableDates","onMonthChange","onDateChange","sentence","id"],"sources":["D:/Coding/chinesestudy/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Navigation from './components/Navigation';\nimport SentenceCard from './components/SentenceCard';\nimport { SentenceData, Sentence } from './types';\nimport './styles/App.css';\n\nconst App: React.FC = () => {\n  const [availableFiles, setAvailableFiles] = useState<string[]>([]);\n  const [selectedMonth, setSelectedMonth] = useState<string>('2025-08');\n  const [selectedDate, setSelectedDate] = useState<string>('2025-08-07');\n  const [sentenceData, setSentenceData] = useState<SentenceData | null>(null);\n  const [sentences, setSentences] = useState<Sentence[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string>('');\n  const [isDarkMode, setIsDarkMode] = useState<boolean>(() => {\n    const saved = localStorage.getItem('isDarkMode');\n    return saved ? JSON.parse(saved) : false;\n  });\n\n  // 초기 데이터 로드\n  useEffect(() => {\n    const loadInitialData = async () => {\n      setLoading(true);\n      setError('');\n      \n      try {\n        console.log('Fetching data from /data/sentences202508.json');\n        const response = await fetch('/data/sentences202508.json');\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data: SentenceData = await response.json();\n        console.log('Data loaded successfully:', data);\n        console.log('Contents array:', data.contents);\n        \n        if (!data || !data.contents || !Array.isArray(data.contents) || data.contents.length === 0) {\n          throw new Error('Invalid data structure');\n        }\n        \n        // 첫 번째 날짜의 문장들 가져오기\n        const firstDateData = data.contents[0];\n        console.log('First date data:', firstDateData);\n        console.log('Sentences:', firstDateData.sentences);\n        \n        setSentenceData(data);\n        setSentences(firstDateData.sentences);\n        \n        // 실제 JSON 파일의 날짜들로 설정\n        const actualDates = data.contents.map(content => content.date);\n        console.log('Actual dates from JSON:', actualDates);\n        \n        setAvailableFiles(actualDates);\n        if (actualDates.length > 0) {\n          const firstDate = actualDates[0];\n          const month = firstDate.substring(0, 7); // 2025-08\n          setSelectedMonth(month);\n          setSelectedDate(firstDate);\n        }\n        \n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err instanceof Error ? err.message : '데이터를 불러올 수 없습니다.');\n        setSentences([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadInitialData();\n  }, []);\n\n  // 월 변경 핸들러\n  const handleMonthChange = (month: string) => {\n    console.log('Month changed to:', month);\n    setSelectedMonth(month);\n    \n    // 해당 월의 첫 번째 날짜 선택\n    const monthDates = availableFiles.filter(date => date.startsWith(month));\n    if (monthDates.length > 0) {\n      setSelectedDate(monthDates[0]);\n      // 여기서 새로운 데이터를 로드해야 함 (현재는 2025-08만 있음)\n    }\n  };\n\n  // 날짜 변경 핸들러\n  const handleDateChange = (date: string) => {\n    console.log('Date changed to:', date);\n    setSelectedDate(date);\n    \n    // 선택된 날짜에 해당하는 문장 데이터 찾기\n    if (sentenceData && sentenceData.contents) {\n      const selectedDateData = sentenceData.contents.find(content => content.date === date);\n      if (selectedDateData) {\n        console.log('Found data for date:', date, selectedDateData);\n        setSentences(selectedDateData.sentences);\n      } else {\n        console.log('No data found for date:', date);\n        setSentences([]);\n      }\n    }\n  };\n\n\n  // 다크 모드 토글\n  const toggleDarkMode = () => {\n    const newMode = !isDarkMode;\n    setIsDarkMode(newMode);\n    localStorage.setItem('isDarkMode', JSON.stringify(newMode));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"app\">\n        <div className=\"loading\">데이터를 불러오는 중...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"app\">\n        <div className=\"error\">\n          <h2>오류 발생</h2>\n          <p>{error}</p>\n          <p>브라우저 콘솔(F12)을 확인해주세요.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`app ${isDarkMode ? 'dark-mode' : ''}`}>\n      <header className=\"app-header\">\n        <div className=\"header-title\">\n          <h1>진차이린 중국어</h1>\n          <button \n            type=\"button\"\n            className=\"theme-toggle\" \n            onClick={toggleDarkMode}\n            title={isDarkMode ? \"라이트 모드로 변경\" : \"다크 모드로 변경\"}\n          >\n            {isDarkMode ? '☀️' : '💡'}\n          </button>\n        </div>\n        {/* <div className=\"date-info\">{formatDateDisplay()}</div> */}\n      </header>\n\n      {availableFiles.length > 0 && (\n        <Navigation\n          availableDates={availableFiles}\n          selectedMonth={selectedMonth}\n          selectedDate={selectedDate}\n          onMonthChange={handleMonthChange}\n          onDateChange={handleDateChange}\n        />\n      )}\n\n      <main className=\"content\">\n        {sentences.length > 0 ? (\n          <div className=\"sentences-container\">\n            {sentences.map((sentence) => (\n              <SentenceCard key={sentence.id} sentence={sentence} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"error\">\n            <h2>데이터 없음</h2>\n            <p>표시할 문장이 없습니다.</p>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}