{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\chinesestudy\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Navigation from './components/Navigation';\nimport SentenceCard from './components/SentenceCard';\nimport './styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [availableFiles, setAvailableFiles] = useState([]);\n  const [selectedMonth, setSelectedMonth] = useState('202508');\n  const [selectedDate, setSelectedDate] = useState('20250807');\n  const [sentenceData, setSentenceData] = useState(null);\n  const [sentences, setSentences] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // 초기 데이터 로드\n  useEffect(() => {\n    const loadInitialData = async () => {\n      setLoading(true);\n      setError('');\n      try {\n        console.log('Fetching data from /data/sentences202508.json');\n        const response = await fetch('/data/sentences202508.json');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Data loaded successfully:', data);\n        console.log(data.contents);\n        console.log(data.contents.sentences);\n        if (!data || !data.contents || !data.contents.sentences) {\n          throw new Error('Invalid data structure');\n        }\n        setSentenceData(data);\n        setSentences(data.contents.sentences);\n\n        // 네비게이션을 위한 설정 (현재는 하드코딩)\n        // 추후 여러 날짜 파일이 추가되면 동적으로 변경\n        setAvailableFiles(['20250807', '20250808', '20250809']); // 예시 날짜들\n        setSelectedMonth('202508');\n        setSelectedDate('20250807');\n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err instanceof Error ? err.message : '데이터를 불러올 수 없습니다.');\n        setSentences([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadInitialData();\n  }, []);\n\n  // 월 변경 핸들러\n  const handleMonthChange = month => {\n    console.log('Month changed to:', month);\n    setSelectedMonth(month);\n\n    // 해당 월의 첫 번째 날짜 선택\n    const monthDates = availableFiles.filter(date => date.startsWith(month));\n    if (monthDates.length > 0) {\n      setSelectedDate(monthDates[0]);\n      // 여기서 새로운 데이터를 로드해야 함 (현재는 202508만 있음)\n    }\n  };\n\n  // 날짜 변경 핸들러\n  const handleDateChange = date => {\n    console.log('Date changed to:', date);\n    setSelectedDate(date);\n\n    // 선택된 날짜에 해당하는 데이터 로드\n    // 현재는 20250807 데이터만 있으므로, 다른 날짜를 선택해도 같은 데이터 표시\n    // 추후 날짜별 JSON 파일이 추가되면 여기서 fetch 수행\n  };\n\n  // 날짜 포맷팅\n  const formatDateDisplay = () => {\n    if (!selectedDate) return '';\n    const year = selectedDate.substring(0, 4);\n    const month = selectedDate.substring(4, 6);\n    const day = selectedDate.substring(6, 8);\n    return `${year}년 ${month}월 ${day}일`;\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uC624\\uB958 \\uBC1C\\uC0DD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uBE0C\\uB77C\\uC6B0\\uC800 \\uCF58\\uC194(F12)\\uC744 \\uD655\\uC778\\uD574\\uC8FC\\uC138\\uC694.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uC911\\uAD6D\\uC5B4 \\uBB38\\uC7A5 \\uD559\\uC2B5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-info\",\n        children: formatDateDisplay()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), availableFiles.length > 0 && /*#__PURE__*/_jsxDEV(Navigation, {\n      availableDates: availableFiles,\n      selectedMonth: selectedMonth,\n      selectedDate: selectedDate,\n      onMonthChange: handleMonthChange,\n      onDateChange: handleDateChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"content\",\n      children: sentences.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sentences-container\",\n        children: sentences.map(sentence => /*#__PURE__*/_jsxDEV(SentenceCard, {\n          sentence: sentence\n        }, sentence.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uB370\\uC774\\uD130 \\uC5C6\\uC74C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD45C\\uC2DC\\uD560 \\uBB38\\uC7A5\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ehp5JAF0wlyWLxKj8VvjqnRsRUY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navigation","SentenceCard","jsxDEV","_jsxDEV","App","_s","availableFiles","setAvailableFiles","selectedMonth","setSelectedMonth","selectedDate","setSelectedDate","sentenceData","setSentenceData","sentences","setSentences","loading","setLoading","error","setError","loadInitialData","console","log","response","fetch","ok","Error","status","data","json","contents","err","message","handleMonthChange","month","monthDates","filter","date","startsWith","length","handleDateChange","formatDateDisplay","year","substring","day","className","children","fileName","_jsxFileName","lineNumber","columnNumber","availableDates","onMonthChange","onDateChange","map","sentence","id","_c","$RefreshReg$"],"sources":["D:/Coding/chinesestudy/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Navigation from './components/Navigation';\nimport SentenceCard from './components/SentenceCard';\nimport { SentenceData, Sentence } from './types';\nimport './styles/App.css';\n\nconst App: React.FC = () => {\n  const [availableFiles, setAvailableFiles] = useState<string[]>([]);\n  const [selectedMonth, setSelectedMonth] = useState<string>('202508');\n  const [selectedDate, setSelectedDate] = useState<string>('20250807');\n  const [sentenceData, setSentenceData] = useState<SentenceData | null>(null);\n  const [sentences, setSentences] = useState<Sentence[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string>('');\n\n  // 초기 데이터 로드\n  useEffect(() => {\n    const loadInitialData = async () => {\n      setLoading(true);\n      setError('');\n      \n      try {\n        console.log('Fetching data from /data/sentences202508.json');\n        const response = await fetch('/data/sentences202508.json');\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data: SentenceData = await response.json();\n        console.log('Data loaded successfully:', data);\n        console.log( data.contents );\n        console.log( data.contents.sentences );\n        \n        if (!data || !data.contents || !data.contents.sentences) {\n          throw new Error('Invalid data structure');\n        }\n        \n        setSentenceData(data);\n        setSentences(data.contents.sentences);\n        \n        // 네비게이션을 위한 설정 (현재는 하드코딩)\n        // 추후 여러 날짜 파일이 추가되면 동적으로 변경\n        setAvailableFiles(['20250807', '20250808', '20250809']); // 예시 날짜들\n        setSelectedMonth('202508');\n        setSelectedDate('20250807');\n        \n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err instanceof Error ? err.message : '데이터를 불러올 수 없습니다.');\n        setSentences([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadInitialData();\n  }, []);\n\n  // 월 변경 핸들러\n  const handleMonthChange = (month: string) => {\n    console.log('Month changed to:', month);\n    setSelectedMonth(month);\n    \n    // 해당 월의 첫 번째 날짜 선택\n    const monthDates = availableFiles.filter(date => date.startsWith(month));\n    if (monthDates.length > 0) {\n      setSelectedDate(monthDates[0]);\n      // 여기서 새로운 데이터를 로드해야 함 (현재는 202508만 있음)\n    }\n  };\n\n  // 날짜 변경 핸들러\n  const handleDateChange = (date: string) => {\n    console.log('Date changed to:', date);\n    setSelectedDate(date);\n    \n    // 선택된 날짜에 해당하는 데이터 로드\n    // 현재는 20250807 데이터만 있으므로, 다른 날짜를 선택해도 같은 데이터 표시\n    // 추후 날짜별 JSON 파일이 추가되면 여기서 fetch 수행\n  };\n\n  // 날짜 포맷팅\n  const formatDateDisplay = () => {\n    if (!selectedDate) return '';\n    const year = selectedDate.substring(0, 4);\n    const month = selectedDate.substring(4, 6);\n    const day = selectedDate.substring(6, 8);\n    return `${year}년 ${month}월 ${day}일`;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"app\">\n        <div className=\"loading\">데이터를 불러오는 중...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"app\">\n        <div className=\"error\">\n          <h2>오류 발생</h2>\n          <p>{error}</p>\n          <p>브라우저 콘솔(F12)을 확인해주세요.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>중국어 문장 학습</h1>\n        <div className=\"date-info\">{formatDateDisplay()}</div>\n      </header>\n\n      {availableFiles.length > 0 && (\n        <Navigation\n          availableDates={availableFiles}\n          selectedMonth={selectedMonth}\n          selectedDate={selectedDate}\n          onMonthChange={handleMonthChange}\n          onDateChange={handleDateChange}\n        />\n      )}\n\n      <main className=\"content\">\n        {sentences.length > 0 ? (\n          <div className=\"sentences-container\">\n            {sentences.map((sentence) => (\n              <SentenceCard key={sentence.id} sentence={sentence} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"error\">\n            <h2>데이터 없음</h2>\n            <p>표시할 문장이 없습니다.</p>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}