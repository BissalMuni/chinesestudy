{"ast":null,"code":"import _objectSpread from\"D:/Coding/chinesestudy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback}from'react';import Navigation from'./components/Navigation';import SentenceCard from'./components/SentenceCard';import{isDateBasedContent,isCategoryContent}from'./types';import'./styles/App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[availableFiles,setAvailableFiles]=useState([]);const[pastMonths,setPastMonths]=useState([]);const[presentMonths,setPresentMonths]=useState([]);const[selectedMonth,setSelectedMonth]=useState('2025-08');const[selectedDate,setSelectedDate]=useState('2025-08-07');const[selectedCategory,setSelectedCategory]=useState('');const[selectedSubcategory]=useState('');// eslint-disable-line @typescript-eslint/no-unused-vars\nconst[lastSelectedFolder,setLastSelectedFolder]=useState(()=>{return localStorage.getItem('lastSelectedFolder')||'';});const[lastSelectedMonth,setLastSelectedMonth]=useState(()=>{return localStorage.getItem('lastSelectedMonth')||'';});const[sentenceData,setSentenceData]=useState(null);const[sentences,setSentences]=useState([]);const[contentSections,setContentSections]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState('');const[isDarkMode,setIsDarkMode]=useState(()=>{const saved=localStorage.getItem('isDarkMode');return saved?JSON.parse(saved):false;});const[isDateBased,setIsDateBased]=useState(false);// 폴더에서 데이터 로드하는 공통 함수\nconst loadDataFromFolder=useCallback(async(folder,month)=>{setLoading(true);setError('');try{// 폴더에서 데이터 로드 (202201.json 형식)\nconst monthCode=month.replace('-','');const response=await fetch(\"/data/\".concat(folder,\"/\").concat(monthCode,\".json\"));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();console.log(\"\".concat(folder,\" data loaded successfully:\"),data);if(!data||!data.contents||!Array.isArray(data.contents)||data.contents.length===0){throw new Error('Invalid data structure');}setSentenceData(data);// Check format and set initial data\nconst firstContent=data.contents[0];if(isDateBasedContent(firstContent)){setIsDateBased(true);setSentences(firstContent.sentences);const actualDates=data.contents.filter(isDateBasedContent).map(content=>content.date);setAvailableFiles(actualDates);if(actualDates.length>0){setSelectedMonth(month);setSelectedDate(actualDates[0]);}}else if(isCategoryContent(firstContent)){setIsDateBased(false);setSelectedCategory('전체');// createContentSections will be called in a separate useEffect\n}}catch(err){console.error(\"Error loading \".concat(folder,\" data:\"),err);setError(err instanceof Error?err.message:\"\".concat(folder,\" \\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC62C \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"));setSentences([]);}finally{setLoading(false);}},[]);// 컨텐츠 섹션 생성 (서브카테고리 구분선 포함)\nconst createContentSections=useCallback(category=>{if(!sentenceData||!sentenceData.contents)return[];const sections=[];let idCounter=1;if(category==='전체'){// 전체 선택 시 모든 카테고리와 서브카테고리 표시\nsentenceData.contents.filter(isCategoryContent).forEach(categoryContent=>{// 카테고리 구분선\nsections.push({type:'divider',dividerText:categoryContent.category});categoryContent.subcategories.forEach(subcategory=>{// 서브카테고리 구분선\nsections.push({type:'divider',dividerText:subcategory.subcategory});// 문장들\nsubcategory.sentences.forEach(sentence=>{sections.push({type:'sentence',sentence:_objectSpread(_objectSpread({},sentence),{},{id:idCounter++})});});});});}else{// 특정 카테고리 선택 시\nconst categoryData=sentenceData.contents.filter(isCategoryContent).find(content=>content.category===category);if(categoryData){categoryData.subcategories.forEach(subcategory=>{// 서브카테고리 구분선\nsections.push({type:'divider',dividerText:subcategory.subcategory});// 문장들\nsubcategory.sentences.forEach(sentence=>{sections.push({type:'sentence',sentence:_objectSpread(_objectSpread({},sentence),{},{id:idCounter++})});});});}}return sections;},[sentenceData]);// 과거 및 현재 월 목록 로드\nuseEffect(()=>{const loadAllMonths=async()=>{try{// 과거 파일 목록 로드\nconst pastManifestResponse=await fetch('/data/past/manifest.json');if(pastManifestResponse.ok){const pastManifest=await pastManifestResponse.json();const pastFiles=pastManifest.files||[];// 파일명에서 월 정보 추출 (202201.json -> 2022-01)\nconst pastMonths=pastFiles.map(filename=>{const match=filename.match(/(\\d{4})(\\d{2})\\.json/);if(match){return\"\".concat(match[1],\"-\").concat(match[2]);}return null;}).filter(Boolean);setPastMonths(pastMonths);console.log('Past months loaded:',pastMonths);}// 현재 파일 목록 로드\nconst presentManifestResponse=await fetch('/data/present/manifest.json');if(presentManifestResponse.ok){const presentManifest=await presentManifestResponse.json();const presentFiles=presentManifest.files||[];// 파일명에서 월 정보 추출 (202508.json -> 2025-08)\nconst presentMonths=presentFiles.map(filename=>{const match=filename.match(/(\\d{4})(\\d{2})\\.json/);if(match){return\"\".concat(match[1],\"-\").concat(match[2]);}return null;}).filter(Boolean);setPresentMonths(presentMonths);console.log('Present months loaded:',presentMonths);}}catch(err){console.error('Error loading months:',err);}};loadAllMonths();},[]);// 카테고리 기반 데이터일 때 기본 컨텐츠 섹션 설정\nuseEffect(()=>{if(sentenceData&&!isDateBased&&selectedCategory==='전체'){const sections=createContentSections('전체');setContentSections(sections);const sentencesOnly=sections.filter(section=>section.type==='sentence').map(section=>section.sentence).filter(Boolean);setSentences(sentencesOnly);}},[sentenceData,isDateBased,selectedCategory,createContentSections]);// 월 변경 핸들러\nconst handleMonthChange=month=>{console.log('Month changed to:',month);setSelectedMonth(month);// 해당 월의 첫 번째 날짜 선택\nconst monthDates=availableFiles.filter(date=>date.startsWith(month));if(monthDates.length>0){setSelectedDate(monthDates[0]);// 여기서 새로운 데이터를 로드해야 함 (현재는 2025-08만 있음)\n}};// 과거 월 선택 핸들러\nconst handlePastMonthChange=async month=>{console.log('Past month selected:',month);localStorage.setItem('lastSelectedFolder','past');localStorage.setItem('lastSelectedMonth',month);setLastSelectedFolder('past');setLastSelectedMonth(month);await loadDataFromFolder('past',month);};// 현재 월 선택 핸들러\nconst handlePresentMonthChange=async month=>{console.log('Present month selected:',month);localStorage.setItem('lastSelectedFolder','present');localStorage.setItem('lastSelectedMonth',month);setLastSelectedFolder('present');setLastSelectedMonth(month);await loadDataFromFolder('present',month);};// 카테고리 변경 핸들러\nconst handleCategoryChange=category=>{console.log('Category changed to:',category);setSelectedCategory(category);// 컨텐츠 섹션 생성 (서브카테고리 구분선 포함)\nconst sections=createContentSections(category);setContentSections(sections);// 기존 sentences도 업데이트 (호환성을 위해 유지)\nconst sentencesOnly=sections.filter(section=>section.type==='sentence').map(section=>section.sentence).filter(Boolean);setSentences(sentencesOnly);};// 날짜 변경 핸들러\nconst handleDateChange=date=>{console.log('Date changed to:',date);setSelectedDate(date);// 선택된 날짜에 해당하는 문장 데이터 찾기\nif(sentenceData&&sentenceData.contents){const selectedDateData=sentenceData.contents.filter(isDateBasedContent).find(content=>content.date===date);if(selectedDateData){console.log('Found data for date:',date,selectedDateData);setSentences(selectedDateData.sentences);}else{console.log('No data found for date:',date);setSentences([]);}}};// 다크 모드 토글\nconst toggleDarkMode=()=>{const newMode=!isDarkMode;setIsDarkMode(newMode);localStorage.setItem('isDarkMode',JSON.stringify(newMode));};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"app\",children:/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"})});}if(error){return/*#__PURE__*/_jsx(\"div\",{className:\"app\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"error\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uC624\\uB958 \\uBC1C\\uC0DD\"}),/*#__PURE__*/_jsx(\"p\",{children:error}),/*#__PURE__*/_jsx(\"p\",{children:\"\\uBE0C\\uB77C\\uC6B0\\uC800 \\uCF58\\uC194(F12)\\uC744 \\uD655\\uC778\\uD574\\uC8FC\\uC138\\uC694.\"})]})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"app \".concat(isDarkMode?'dark-mode':''),children:[/*#__PURE__*/_jsx(\"header\",{className:\"app-header\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"header-title\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\uC9C4\\uCC28\\uC774\\uB9B0 \\uC911\\uAD6D\\uC5B4\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"theme-toggle\",onClick:toggleDarkMode,title:isDarkMode?\"라이트 모드로 변경\":\"다크 모드로 변경\",children:isDarkMode?'☀️':'💡'})]})}),(availableFiles.length>0||sentenceData||pastMonths.length>0||presentMonths.length>0)&&/*#__PURE__*/_jsx(Navigation,{availableDates:availableFiles,pastMonths:pastMonths,presentMonths:presentMonths,selectedMonth:selectedMonth,selectedDate:selectedDate,selectedCategory:selectedCategory,sentenceData:sentenceData,isDateBased:isDateBased,lastSelectedFolder:lastSelectedFolder,lastSelectedMonth:lastSelectedMonth,onMonthChange:handleMonthChange,onDateChange:handleDateChange,onCategoryChange:handleCategoryChange,onPastMonthChange:handlePastMonthChange,onPresentMonthChange:handlePresentMonthChange}),/*#__PURE__*/_jsx(\"main\",{className:\"content\",children:contentSections.length>0?/*#__PURE__*/_jsx(\"div\",{className:\"content-container\",children:contentSections.map((section,index)=>section.type==='divider'?/*#__PURE__*/_jsx(\"div\",{className:\"subcategory-divider\",children:/*#__PURE__*/_jsx(\"h3\",{children:section.dividerText})},\"divider-\".concat(index)):section.sentence&&/*#__PURE__*/_jsx(SentenceCard,{sentence:section.sentence},section.sentence.id))}):sentences.length>0?/*#__PURE__*/_jsx(\"div\",{className:\"sentences-container\",children:sentences.map(sentence=>/*#__PURE__*/_jsx(SentenceCard,{sentence:sentence},sentence.id))}):/*#__PURE__*/_jsxs(\"div\",{className:\"error\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD658\\uC601\\uD569\\uB2C8\\uB2E4!\"}),/*#__PURE__*/_jsx(\"p\",{children:\"\\uC704\\uC5D0\\uC11C \\uD559\\uC2B5\\uD560 \\uC790\\uB8CC\\uB97C \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694.\"})]})})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","Navigation","SentenceCard","isDateBasedContent","isCategoryContent","jsx","_jsx","jsxs","_jsxs","App","availableFiles","setAvailableFiles","pastMonths","setPastMonths","presentMonths","setPresentMonths","selectedMonth","setSelectedMonth","selectedDate","setSelectedDate","selectedCategory","setSelectedCategory","selectedSubcategory","lastSelectedFolder","setLastSelectedFolder","localStorage","getItem","lastSelectedMonth","setLastSelectedMonth","sentenceData","setSentenceData","sentences","setSentences","contentSections","setContentSections","loading","setLoading","error","setError","isDarkMode","setIsDarkMode","saved","JSON","parse","isDateBased","setIsDateBased","loadDataFromFolder","folder","month","monthCode","replace","response","fetch","concat","ok","Error","status","data","json","console","log","contents","Array","isArray","length","firstContent","actualDates","filter","map","content","date","err","message","createContentSections","category","sections","idCounter","forEach","categoryContent","push","type","dividerText","subcategories","subcategory","sentence","_objectSpread","id","categoryData","find","loadAllMonths","pastManifestResponse","pastManifest","pastFiles","files","filename","match","Boolean","presentManifestResponse","presentManifest","presentFiles","sentencesOnly","section","handleMonthChange","monthDates","startsWith","handlePastMonthChange","setItem","handlePresentMonthChange","handleCategoryChange","handleDateChange","selectedDateData","toggleDarkMode","newMode","stringify","className","children","onClick","title","availableDates","onMonthChange","onDateChange","onCategoryChange","onPastMonthChange","onPresentMonthChange","index"],"sources":["D:/Coding/chinesestudy/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport Navigation from './components/Navigation';\nimport SentenceCard from './components/SentenceCard';\nimport { SentenceData, Sentence, isDateBasedContent, isCategoryContent, ContentSection } from './types';\nimport './styles/App.css';\n\nconst App: React.FC = () => {\n  const [availableFiles, setAvailableFiles] = useState<string[]>([]);\n  const [pastMonths, setPastMonths] = useState<string[]>([]);\n  const [presentMonths, setPresentMonths] = useState<string[]>([]);\n  const [selectedMonth, setSelectedMonth] = useState<string>('2025-08');\n  const [selectedDate, setSelectedDate] = useState<string>('2025-08-07');\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [selectedSubcategory] = useState<string>(''); // eslint-disable-line @typescript-eslint/no-unused-vars\n  const [lastSelectedFolder, setLastSelectedFolder] = useState<string>(() => {\n    return localStorage.getItem('lastSelectedFolder') || '';\n  });\n  const [lastSelectedMonth, setLastSelectedMonth] = useState<string>(() => {\n    return localStorage.getItem('lastSelectedMonth') || '';\n  });\n  const [sentenceData, setSentenceData] = useState<SentenceData | null>(null);\n  const [sentences, setSentences] = useState<Sentence[]>([]);\n  const [contentSections, setContentSections] = useState<ContentSection[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string>('');\n  const [isDarkMode, setIsDarkMode] = useState<boolean>(() => {\n    const saved = localStorage.getItem('isDarkMode');\n    return saved ? JSON.parse(saved) : false;\n  });\n  const [isDateBased, setIsDateBased] = useState<boolean>(false);\n\n  // 폴더에서 데이터 로드하는 공통 함수\n  const loadDataFromFolder = useCallback(async (folder: 'past' | 'present', month: string) => {\n    setLoading(true);\n    setError('');\n    \n    try {\n      // 폴더에서 데이터 로드 (202201.json 형식)\n      const monthCode = month.replace('-', '');\n      const response = await fetch(`/data/${folder}/${monthCode}.json`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data: SentenceData = await response.json();\n      console.log(`${folder} data loaded successfully:`, data);\n      \n      if (!data || !data.contents || !Array.isArray(data.contents) || data.contents.length === 0) {\n        throw new Error('Invalid data structure');\n      }\n      \n      setSentenceData(data);\n      \n      // Check format and set initial data\n      const firstContent = data.contents[0];\n      if (isDateBasedContent(firstContent)) {\n        setIsDateBased(true);\n        setSentences(firstContent.sentences);\n        const actualDates = data.contents\n          .filter(isDateBasedContent)\n          .map(content => content.date);\n        setAvailableFiles(actualDates);\n        if (actualDates.length > 0) {\n          setSelectedMonth(month);\n          setSelectedDate(actualDates[0]);\n        }\n      } else if (isCategoryContent(firstContent)) {\n        setIsDateBased(false);\n        setSelectedCategory('전체');\n        // createContentSections will be called in a separate useEffect\n      }\n    } catch (err) {\n      console.error(`Error loading ${folder} data:`, err);\n      setError(err instanceof Error ? err.message : `${folder} 데이터를 불러올 수 없습니다.`);\n      setSentences([]);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 컨텐츠 섹션 생성 (서브카테고리 구분선 포함)\n  const createContentSections = useCallback((category: string) => {\n    if (!sentenceData || !sentenceData.contents) return [];\n    \n    const sections: ContentSection[] = [];\n    let idCounter = 1;\n    \n    if (category === '전체') {\n      // 전체 선택 시 모든 카테고리와 서브카테고리 표시\n      sentenceData.contents\n        .filter(isCategoryContent)\n        .forEach(categoryContent => {\n          // 카테고리 구분선\n          sections.push({\n            type: 'divider',\n            dividerText: categoryContent.category\n          });\n          \n          categoryContent.subcategories.forEach(subcategory => {\n            // 서브카테고리 구분선\n            sections.push({\n              type: 'divider',\n              dividerText: subcategory.subcategory\n            });\n            \n            // 문장들\n            subcategory.sentences.forEach(sentence => {\n              sections.push({\n                type: 'sentence',\n                sentence: {\n                  ...sentence,\n                  id: idCounter++\n                }\n              });\n            });\n          });\n        });\n    } else {\n      // 특정 카테고리 선택 시\n      const categoryData = sentenceData.contents\n        .filter(isCategoryContent)\n        .find(content => content.category === category);\n      \n      if (categoryData) {\n        categoryData.subcategories.forEach(subcategory => {\n          // 서브카테고리 구분선\n          sections.push({\n            type: 'divider',\n            dividerText: subcategory.subcategory\n          });\n          \n          // 문장들\n          subcategory.sentences.forEach(sentence => {\n            sections.push({\n              type: 'sentence',\n              sentence: {\n                ...sentence,\n                id: idCounter++\n              }\n            });\n          });\n        });\n      }\n    }\n    \n    return sections;\n  }, [sentenceData]);\n\n  // 과거 및 현재 월 목록 로드\n  useEffect(() => {\n    const loadAllMonths = async () => {\n      try {\n        // 과거 파일 목록 로드\n        const pastManifestResponse = await fetch('/data/past/manifest.json');\n        if (pastManifestResponse.ok) {\n          const pastManifest = await pastManifestResponse.json();\n          const pastFiles = pastManifest.files || [];\n          \n          // 파일명에서 월 정보 추출 (202201.json -> 2022-01)\n          const pastMonths = pastFiles.map((filename: string) => {\n            const match = filename.match(/(\\d{4})(\\d{2})\\.json/);\n            if (match) {\n              return `${match[1]}-${match[2]}`;\n            }\n            return null;\n          }).filter(Boolean);\n          \n          setPastMonths(pastMonths);\n          console.log('Past months loaded:', pastMonths);\n        }\n        \n        // 현재 파일 목록 로드\n        const presentManifestResponse = await fetch('/data/present/manifest.json');\n        if (presentManifestResponse.ok) {\n          const presentManifest = await presentManifestResponse.json();\n          const presentFiles = presentManifest.files || [];\n          \n          // 파일명에서 월 정보 추출 (202508.json -> 2025-08)\n          const presentMonths = presentFiles.map((filename: string) => {\n            const match = filename.match(/(\\d{4})(\\d{2})\\.json/);\n            if (match) {\n              return `${match[1]}-${match[2]}`;\n            }\n            return null;\n          }).filter(Boolean);\n          \n          setPresentMonths(presentMonths);\n          console.log('Present months loaded:', presentMonths);\n        }\n      } catch (err) {\n        console.error('Error loading months:', err);\n      }\n    };\n    loadAllMonths();\n  }, []);\n\n  // 카테고리 기반 데이터일 때 기본 컨텐츠 섹션 설정\n  useEffect(() => {\n    if (sentenceData && !isDateBased && selectedCategory === '전체') {\n      const sections = createContentSections('전체');\n      setContentSections(sections);\n      \n      const sentencesOnly = sections\n        .filter(section => section.type === 'sentence')\n        .map(section => section.sentence!)\n        .filter(Boolean);\n      setSentences(sentencesOnly);\n    }\n  }, [sentenceData, isDateBased, selectedCategory, createContentSections]);\n\n\n  // 월 변경 핸들러\n  const handleMonthChange = (month: string) => {\n    console.log('Month changed to:', month);\n    setSelectedMonth(month);\n    \n    // 해당 월의 첫 번째 날짜 선택\n    const monthDates = availableFiles.filter(date => date.startsWith(month));\n    if (monthDates.length > 0) {\n      setSelectedDate(monthDates[0]);\n      // 여기서 새로운 데이터를 로드해야 함 (현재는 2025-08만 있음)\n    }\n  };\n\n  // 과거 월 선택 핸들러\n  const handlePastMonthChange = async (month: string) => {\n    console.log('Past month selected:', month);\n    localStorage.setItem('lastSelectedFolder', 'past');\n    localStorage.setItem('lastSelectedMonth', month);\n    setLastSelectedFolder('past');\n    setLastSelectedMonth(month);\n    await loadDataFromFolder('past', month);\n  };\n  \n  // 현재 월 선택 핸들러\n  const handlePresentMonthChange = async (month: string) => {\n    console.log('Present month selected:', month);\n    localStorage.setItem('lastSelectedFolder', 'present');\n    localStorage.setItem('lastSelectedMonth', month);\n    setLastSelectedFolder('present');\n    setLastSelectedMonth(month);\n    await loadDataFromFolder('present', month);\n  };\n\n  // 카테고리 변경 핸들러\n  const handleCategoryChange = (category: string) => {\n    console.log('Category changed to:', category);\n    setSelectedCategory(category);\n    \n    // 컨텐츠 섹션 생성 (서브카테고리 구분선 포함)\n    const sections = createContentSections(category);\n    setContentSections(sections);\n    \n    // 기존 sentences도 업데이트 (호환성을 위해 유지)\n    const sentencesOnly = sections\n      .filter(section => section.type === 'sentence')\n      .map(section => section.sentence!)\n      .filter(Boolean);\n    setSentences(sentencesOnly);\n  };\n\n\n  // 날짜 변경 핸들러\n  const handleDateChange = (date: string) => {\n    console.log('Date changed to:', date);\n    setSelectedDate(date);\n    \n    // 선택된 날짜에 해당하는 문장 데이터 찾기\n    if (sentenceData && sentenceData.contents) {\n      const selectedDateData = sentenceData.contents\n        .filter(isDateBasedContent)\n        .find(content => content.date === date);\n      if (selectedDateData) {\n        console.log('Found data for date:', date, selectedDateData);\n        setSentences(selectedDateData.sentences);\n      } else {\n        console.log('No data found for date:', date);\n        setSentences([]);\n      }\n    }\n  };\n\n\n  // 다크 모드 토글\n  const toggleDarkMode = () => {\n    const newMode = !isDarkMode;\n    setIsDarkMode(newMode);\n    localStorage.setItem('isDarkMode', JSON.stringify(newMode));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"app\">\n        <div className=\"loading\">데이터를 불러오는 중...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"app\">\n        <div className=\"error\">\n          <h2>오류 발생</h2>\n          <p>{error}</p>\n          <p>브라우저 콘솔(F12)을 확인해주세요.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`app ${isDarkMode ? 'dark-mode' : ''}`}>\n      <header className=\"app-header\">\n        <div className=\"header-title\">\n          <h1>진차이린 중국어</h1>\n          <button \n            type=\"button\"\n            className=\"theme-toggle\" \n            onClick={toggleDarkMode}\n            title={isDarkMode ? \"라이트 모드로 변경\" : \"다크 모드로 변경\"}\n          >\n            {isDarkMode ? '☀️' : '💡'}\n          </button>\n        </div>\n        {/* <div className=\"date-info\">{formatDateDisplay()}</div> */}\n      </header>\n\n      {(availableFiles.length > 0 || sentenceData || pastMonths.length > 0 || presentMonths.length > 0) && (\n        <Navigation\n          availableDates={availableFiles}\n          pastMonths={pastMonths}\n          presentMonths={presentMonths}\n          selectedMonth={selectedMonth}\n          selectedDate={selectedDate}\n          selectedCategory={selectedCategory}\n          sentenceData={sentenceData}\n          isDateBased={isDateBased}\n          lastSelectedFolder={lastSelectedFolder}\n          lastSelectedMonth={lastSelectedMonth}\n          onMonthChange={handleMonthChange}\n          onDateChange={handleDateChange}\n          onCategoryChange={handleCategoryChange}\n          onPastMonthChange={handlePastMonthChange}\n          onPresentMonthChange={handlePresentMonthChange}\n        />\n      )}\n\n      <main className=\"content\">\n        {contentSections.length > 0 ? (\n          <div className=\"content-container\">\n            {contentSections.map((section, index) => (\n              section.type === 'divider' ? (\n                <div key={`divider-${index}`} className=\"subcategory-divider\">\n                  <h3>{section.dividerText}</h3>\n                </div>\n              ) : (\n                section.sentence && (\n                  <SentenceCard key={section.sentence.id} sentence={section.sentence} />\n                )\n              )\n            ))}\n          </div>\n        ) : sentences.length > 0 ? (\n          <div className=\"sentences-container\">\n            {sentences.map((sentence) => (\n              <SentenceCard key={sentence.id} sentence={sentence} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"error\">\n            <h2>환영합니다!</h2>\n            <p>위에서 학습할 자료를 선택해주세요.</p>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}