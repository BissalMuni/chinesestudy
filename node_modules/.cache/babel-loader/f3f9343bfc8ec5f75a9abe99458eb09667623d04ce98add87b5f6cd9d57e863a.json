{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\chinesestudy\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Navigation from './components/Navigation';\nimport SentenceCard from './components/SentenceCard';\nimport { isDateBasedContent, isCategoryContent, isDayContent } from './types';\nimport './styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [currentScreen, setCurrentScreen] = useState('home');\n  const [availableFiles, setAvailableFiles] = useState([]);\n  const [pastMonths, setPastMonths] = useState([]);\n  const [presentMonths, setPresentMonths] = useState([]);\n  const [integratedFiles, setIntegratedFiles] = useState([]);\n  const [selectedMonth, setSelectedMonth] = useState(() => {\n    return localStorage.getItem('selectedMonth') || '2025-08';\n  });\n  const [selectedDate, setSelectedDate] = useState(() => {\n    return localStorage.getItem('selectedDate') || '2025-08-07';\n  });\n  const [selectedCategory, setSelectedCategory] = useState(() => {\n    return localStorage.getItem('selectedCategory') || '';\n  });\n  const [selectedSubcategory] = useState(''); // eslint-disable-line @typescript-eslint/no-unused-vars\n  const [lastSelectedFolder, setLastSelectedFolder] = useState(() => {\n    return localStorage.getItem('lastSelectedFolder') || '';\n  });\n  const [lastSelectedMonth, setLastSelectedMonth] = useState(() => {\n    return localStorage.getItem('lastSelectedMonth') || '';\n  });\n  const [sentenceData, setSentenceData] = useState(null);\n  const [sentences, setSentences] = useState([]);\n  const [contentSections, setContentSections] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    const saved = localStorage.getItem('isDarkMode');\n    return saved ? JSON.parse(saved) : false;\n  });\n  const [isDateBased, setIsDateBased] = useState(() => {\n    const saved = localStorage.getItem('isDateBased');\n    return saved ? JSON.parse(saved) : false;\n  });\n\n  // 폴더에서 데이터 로드하는 공통 함수\n  const loadDataFromFolder = useCallback(async (folder, month) => {\n    setLoading(true);\n    setError('');\n    try {\n      // 폴더에서 데이터 로드 (202201.json 형식)\n      const monthCode = month.replace('-', '');\n      const response = await fetch(`/data/${folder}/${monthCode}.json`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(`${folder} data loaded successfully:`, data);\n      if (!data || !data.contents || !Array.isArray(data.contents) || data.contents.length === 0) {\n        throw new Error('Invalid data structure');\n      }\n      setSentenceData(data);\n\n      // 새로운 JSON 구조 처리\n      const firstContent = data.contents[0];\n      if (isDayContent(firstContent)) {\n        // 새로운 구조: day와 content를 가진 형식\n        setIsDateBased(false); // 카테고리 기반으로 처리\n        localStorage.setItem('isDateBased', JSON.stringify(false));\n\n        // 사용 가능한 날짜들 설정\n        const days = data.contents.filter(content => content.day).map(content => content.day);\n        if (days.length > 0) {\n          setSelectedMonth(month);\n          localStorage.setItem('selectedMonth', month);\n\n          // 첫 번째 날짜 선택\n          const firstDay = days[0];\n          const dateStr = `${month}-${String(firstDay).padStart(2, '0')}`;\n          setSelectedDate(dateStr);\n          localStorage.setItem('selectedDate', dateStr);\n\n          // 첫 번째 날짜의 데이터로 초기화\n          const firstDayContent = data.contents[0];\n          if (isDayContent(firstDayContent) && firstDayContent.content && firstDayContent.content.length > 0) {\n            const savedCategory = localStorage.getItem('selectedCategory') || '전체';\n            setSelectedCategory(savedCategory);\n            localStorage.setItem('selectedCategory', savedCategory);\n          }\n        }\n      } else if (isDateBasedContent(firstContent)) {\n        // 기존 날짜 기반 구조\n        setIsDateBased(true);\n        localStorage.setItem('isDateBased', JSON.stringify(true));\n        setSentences(firstContent.sentences);\n        const actualDates = data.contents.filter(isDateBasedContent).map(content => content.date);\n        setAvailableFiles(actualDates);\n        if (actualDates.length > 0) {\n          setSelectedMonth(month);\n          localStorage.setItem('selectedMonth', month);\n          const savedDate = localStorage.getItem('selectedDate');\n          const dateToSelect = savedDate && actualDates.includes(savedDate) ? savedDate : actualDates[0];\n          setSelectedDate(dateToSelect);\n          localStorage.setItem('selectedDate', dateToSelect);\n        }\n      } else if (isCategoryContent(firstContent)) {\n        // 기존 카테고리 기반 구조\n        setIsDateBased(false);\n        localStorage.setItem('isDateBased', JSON.stringify(false));\n        const savedCategory = localStorage.getItem('selectedCategory') || '전체';\n        setSelectedCategory(savedCategory);\n        localStorage.setItem('selectedCategory', savedCategory);\n      }\n    } catch (err) {\n      console.error(`Error loading ${folder} data:`, err);\n      setError(err instanceof Error ? err.message : `${folder} 데이터를 불러올 수 없습니다.`);\n      setSentences([]);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 특정 날짜의 컨텐츠 섹션 생성\n  const createContentSectionsForDay = useCallback(dayContent => {\n    const sections = [];\n    let idCounter = 1;\n    if (dayContent.content) {\n      dayContent.content.forEach(categoryData => {\n        // 카테고리 구분선\n        sections.push({\n          type: 'divider',\n          dividerText: categoryData.category\n        });\n        categoryData.subcategories.forEach(subcategory => {\n          // 서브카테고리 구분선\n          sections.push({\n            type: 'divider',\n            dividerText: subcategory.subcategory\n          });\n\n          // 문장들\n          subcategory.sentences.forEach(sentence => {\n            sections.push({\n              type: 'sentence',\n              sentence: {\n                ...sentence,\n                id: idCounter++\n              }\n            });\n          });\n        });\n      });\n    }\n    return sections;\n  }, []);\n\n  // 컨텐츠 섹션 생성 (카테고리별)\n  const createContentSections = useCallback(category => {\n    if (!sentenceData || !sentenceData.contents) return [];\n    const sections = [];\n    let idCounter = 1;\n\n    // 선택된 날짜의 데이터 가져오기\n    const day = parseInt(selectedDate.split('-')[2]);\n    const dayContent = sentenceData.contents.find(content => isDayContent(content) && content.day === day);\n    if (!dayContent || !dayContent.content) return [];\n    if (category === '전체') {\n      // 전체 선택 시 해당 날짜의 모든 카테고리 표시\n      return createContentSectionsForDay(dayContent);\n    } else {\n      // 특정 카테고리 선택 시\n      const categoryData = dayContent.content.find(cat => cat.category === category);\n      if (categoryData) {\n        categoryData.subcategories.forEach(subcategory => {\n          // 서브카테고리 구분선\n          sections.push({\n            type: 'divider',\n            dividerText: subcategory.subcategory\n          });\n\n          // 문장들\n          subcategory.sentences.forEach(sentence => {\n            sections.push({\n              type: 'sentence',\n              sentence: {\n                ...sentence,\n                id: idCounter++\n              }\n            });\n          });\n        });\n      }\n    }\n    return sections;\n  }, [sentenceData, selectedDate, createContentSectionsForDay]);\n\n  // 과거 및 현재 월 목록 로드\n  useEffect(() => {\n    const loadAllMonths = async () => {\n      try {\n        // Past months 로드\n        const pastResponse = await fetch('/data/past/manifest.json');\n        if (pastResponse.ok) {\n          const pastData = await pastResponse.json();\n          const pastMonths = pastData.files.map(file => {\n            const match = file.match(/(\\d{4})(\\d{2})\\.json$/);\n            if (match) {\n              return `${match[1]}-${match[2]}`;\n            }\n            return null;\n          }).filter(Boolean);\n          setPastMonths(pastMonths);\n          console.log('Past months loaded:', pastMonths);\n        }\n\n        // Present months 로드\n        const presentResponse = await fetch('/data/present/manifest.json');\n        if (presentResponse.ok) {\n          const presentData = await presentResponse.json();\n          const presentMonths = presentData.files.map(file => {\n            const match = file.match(/(\\d{4})(\\d{2})\\.json$/);\n            if (match) {\n              return `${match[1]}-${match[2]}`;\n            }\n            return null;\n          }).filter(Boolean);\n          setPresentMonths(presentMonths);\n          console.log('Present months loaded:', presentMonths);\n        }\n      } catch (err) {\n        console.error('Error loading months:', err);\n      }\n    };\n    loadAllMonths();\n  }, []);\n\n  // 페이지 로드 시 저장된 상태 복원\n  useEffect(() => {\n    const loadSavedState = async () => {\n      const savedFolder = localStorage.getItem('lastSelectedFolder');\n      const savedMonth = localStorage.getItem('lastSelectedMonth');\n      if (savedFolder && savedMonth && (savedFolder === 'past' || savedFolder === 'present')) {\n        try {\n          console.log('Restoring saved state:', savedFolder, savedMonth);\n          await loadDataFromFolder(savedFolder, savedMonth);\n        } catch (error) {\n          console.error('Error restoring saved state:', error);\n        }\n      }\n    };\n    loadSavedState();\n  }, [loadDataFromFolder]);\n\n  // 날짜 기반 데이터일 때 저장된 날짜로 복원\n  useEffect(() => {\n    if (sentenceData && isDateBased && selectedDate) {\n      const selectedDateData = sentenceData.contents.filter(isDateBasedContent).find(content => content.date === selectedDate);\n      if (selectedDateData) {\n        setSentences(selectedDateData.sentences);\n      }\n    }\n  }, [sentenceData, isDateBased, selectedDate]);\n\n  // 카테고리 기반 데이터일 때 컨텐츠 섹션 설정\n  useEffect(() => {\n    if (sentenceData && !isDateBased && selectedCategory) {\n      const sections = createContentSections(selectedCategory);\n      setContentSections(sections);\n      const sentencesOnly = sections.filter(section => section.type === 'sentence').map(section => section.sentence).filter(Boolean);\n      setSentences(sentencesOnly);\n    }\n  }, [sentenceData, isDateBased, selectedCategory, createContentSections]);\n\n  // 월 변경 핸들러\n  const handleMonthChange = month => {\n    console.log('Month changed to:', month);\n    setSelectedMonth(month);\n    localStorage.setItem('selectedMonth', month);\n\n    // 해당 월의 첫 번째 날짜 선택\n    const monthDates = availableFiles.filter(date => date.startsWith(month));\n    if (monthDates.length > 0) {\n      setSelectedDate(monthDates[0]);\n      localStorage.setItem('selectedDate', monthDates[0]);\n      // 여기서 새로운 데이터를 로드해야 함 (현재는 2025-08만 있음)\n    }\n  };\n\n  // 과거 월 선택 핸들러\n  const handlePastMonthChange = async month => {\n    console.log('Past month selected:', month);\n    localStorage.setItem('lastSelectedFolder', 'past');\n    localStorage.setItem('lastSelectedMonth', month);\n    setLastSelectedFolder('past');\n    setLastSelectedMonth(month);\n    await loadDataFromFolder('past', month);\n  };\n\n  // 현재 월 선택 핸들러\n  const handlePresentMonthChange = async month => {\n    console.log('Present month selected:', month);\n    localStorage.setItem('lastSelectedFolder', 'present');\n    localStorage.setItem('lastSelectedMonth', month);\n    setLastSelectedFolder('present');\n    setLastSelectedMonth(month);\n    await loadDataFromFolder('present', month);\n  };\n\n  // 카테고리 변경 핸들러\n  const handleCategoryChange = category => {\n    console.log('Category changed to:', category);\n    setSelectedCategory(category);\n    localStorage.setItem('selectedCategory', category);\n\n    // 컨텐츠 섹션 생성 (서브카테고리 구분선 포함)\n    const sections = createContentSections(category);\n    setContentSections(sections);\n\n    // 기존 sentences도 업데이트 (호환성을 위해 유지)\n    const sentencesOnly = sections.filter(section => section.type === 'sentence').map(section => section.sentence).filter(Boolean);\n    setSentences(sentencesOnly);\n  };\n\n  // 날짜 변경 핸들러 (새로운 JSON 구조 지원)\n  const handleDateChange = date => {\n    console.log('Date changed to:', date);\n    setSelectedDate(date);\n    localStorage.setItem('selectedDate', date);\n\n    // 새로운 JSON 구조에서 day로 데이터 찾기\n    if (sentenceData && sentenceData.contents) {\n      const day = parseInt(date.split('-')[2]);\n      const dayContent = sentenceData.contents.find(content => isDayContent(content) && content.day === day);\n      if (dayContent && dayContent.content) {\n        var _dayContent$content$;\n        // 첫 번째 카테고리를 기본으로 선택\n        const firstCategory = ((_dayContent$content$ = dayContent.content[0]) === null || _dayContent$content$ === void 0 ? void 0 : _dayContent$content$.category) || '전체';\n        setSelectedCategory(firstCategory);\n        localStorage.setItem('selectedCategory', firstCategory);\n\n        // 해당 날짜의 모든 문장을 contentSections로 설정\n        const sections = createContentSectionsForDay(dayContent);\n        setContentSections(sections);\n        const sentencesOnly = sections.filter(section => section.type === 'sentence').map(section => section.sentence).filter(Boolean);\n        setSentences(sentencesOnly);\n      } else {\n        console.log('No data found for day:', day);\n        setSentences([]);\n        setContentSections([]);\n      }\n    }\n  };\n\n  // 다크 모드 토글\n  const toggleDarkMode = () => {\n    const newMode = !isDarkMode;\n    setIsDarkMode(newMode);\n    localStorage.setItem('isDarkMode', JSON.stringify(newMode));\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: [\"\\uC624\\uB958: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${isDarkMode ? 'dark-mode' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"app-title\",\n        children: \"\\u4E2D\\u6587\\u5B66\\u4E60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dark-mode-toggle\",\n        onClick: toggleDarkMode,\n        \"aria-label\": \"\\uB2E4\\uD06C \\uBAA8\\uB4DC \\uD1A0\\uAE00\",\n        children: isDarkMode ? '☀️' : '🌙'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      availableDates: availableFiles,\n      pastMonths: pastMonths,\n      presentMonths: presentMonths,\n      selectedMonth: selectedMonth,\n      selectedDate: selectedDate,\n      selectedCategory: selectedCategory,\n      sentenceData: sentenceData,\n      lastSelectedFolder: lastSelectedFolder,\n      lastSelectedMonth: lastSelectedMonth,\n      onMonthChange: handleMonthChange,\n      onDateChange: handleDateChange,\n      onCategoryChange: handleCategoryChange,\n      onPastMonthChange: handlePastMonthChange,\n      onPresentMonthChange: handlePresentMonthChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sentences-container\",\n        children: !isDateBased && contentSections.length > 0 ?\n        // 카테고리 기반 렌더링 (서브카테고리 구분선 포함)\n        contentSections.map((section, index) => {\n          var _section$sentence;\n          return section.type === 'divider' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"subcategory-divider\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: section.dividerText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 19\n            }, this)\n          }, `divider-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(SentenceCard, {\n            sentence: section.sentence\n          }, `sentence-${((_section$sentence = section.sentence) === null || _section$sentence === void 0 ? void 0 : _section$sentence.id) || index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 17\n          }, this);\n        }) :\n        // 날짜 기반 렌더링 또는 빈 상태\n        sentences.length > 0 ? sentences.map(sentence => /*#__PURE__*/_jsxDEV(SentenceCard, {\n          sentence: sentence\n        }, sentence.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-data\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uD45C\\uC2DC\\uD560 \\uBB38\\uC7A5\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uB0A0\\uC9DC \\uB610\\uB294 \\uCE74\\uD14C\\uACE0\\uB9AC\\uB97C \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 415,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"c++lmKzGnOKsLeNN6PZ4bWkjAzo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Navigation","SentenceCard","isDateBasedContent","isCategoryContent","isDayContent","jsxDEV","_jsxDEV","App","_s","currentScreen","setCurrentScreen","availableFiles","setAvailableFiles","pastMonths","setPastMonths","presentMonths","setPresentMonths","integratedFiles","setIntegratedFiles","selectedMonth","setSelectedMonth","localStorage","getItem","selectedDate","setSelectedDate","selectedCategory","setSelectedCategory","selectedSubcategory","lastSelectedFolder","setLastSelectedFolder","lastSelectedMonth","setLastSelectedMonth","sentenceData","setSentenceData","sentences","setSentences","contentSections","setContentSections","loading","setLoading","error","setError","isDarkMode","setIsDarkMode","saved","JSON","parse","isDateBased","setIsDateBased","loadDataFromFolder","folder","month","monthCode","replace","response","fetch","ok","Error","status","data","json","console","log","contents","Array","isArray","length","firstContent","setItem","stringify","days","filter","content","day","map","firstDay","dateStr","String","padStart","firstDayContent","savedCategory","actualDates","date","savedDate","dateToSelect","includes","err","message","createContentSectionsForDay","dayContent","sections","idCounter","forEach","categoryData","push","type","dividerText","category","subcategories","subcategory","sentence","id","createContentSections","parseInt","split","find","cat","loadAllMonths","pastResponse","pastData","files","file","match","Boolean","presentResponse","presentData","loadSavedState","savedFolder","savedMonth","selectedDateData","sentencesOnly","section","handleMonthChange","monthDates","startsWith","handlePastMonthChange","handlePresentMonthChange","handleCategoryChange","handleDateChange","_dayContent$content$","firstCategory","toggleDarkMode","newMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","availableDates","onMonthChange","onDateChange","onCategoryChange","onPastMonthChange","onPresentMonthChange","index","_section$sentence","_c","$RefreshReg$"],"sources":["D:/Coding/chinesestudy/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport Navigation from './components/Navigation';\r\nimport SentenceCard from './components/SentenceCard';\r\nimport { SentenceData, Sentence, isDateBasedContent, isCategoryContent, isDayContent, ContentSection, DayContent } from './types';\r\nimport './styles/App.css';\r\n\r\nconst App: React.FC = () => {\r\n  const [currentScreen, setCurrentScreen] = useState<'home' | 'recently' | 'integrated'>('home');\r\n  const [availableFiles, setAvailableFiles] = useState<string[]>([]);\r\n  const [pastMonths, setPastMonths] = useState<string[]>([]);\r\n  const [presentMonths, setPresentMonths] = useState<string[]>([]);\r\n  const [integratedFiles, setIntegratedFiles] = useState<string[]>([]);\r\n  const [selectedMonth, setSelectedMonth] = useState<string>(() => {\r\n    return localStorage.getItem('selectedMonth') || '2025-08';\r\n  });\r\n  const [selectedDate, setSelectedDate] = useState<string>(() => {\r\n    return localStorage.getItem('selectedDate') || '2025-08-07';\r\n  });\r\n  const [selectedCategory, setSelectedCategory] = useState<string>(() => {\r\n    return localStorage.getItem('selectedCategory') || '';\r\n  });\r\n  const [selectedSubcategory] = useState<string>(''); // eslint-disable-line @typescript-eslint/no-unused-vars\r\n  const [lastSelectedFolder, setLastSelectedFolder] = useState<string>(() => {\r\n    return localStorage.getItem('lastSelectedFolder') || '';\r\n  });\r\n  const [lastSelectedMonth, setLastSelectedMonth] = useState<string>(() => {\r\n    return localStorage.getItem('lastSelectedMonth') || '';\r\n  });\r\n  const [sentenceData, setSentenceData] = useState<SentenceData | null>(null);\r\n  const [sentences, setSentences] = useState<Sentence[]>([]);\r\n  const [contentSections, setContentSections] = useState<ContentSection[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string>('');\r\n  const [isDarkMode, setIsDarkMode] = useState<boolean>(() => {\r\n    const saved = localStorage.getItem('isDarkMode');\r\n    return saved ? JSON.parse(saved) : false;\r\n  });\r\n  const [isDateBased, setIsDateBased] = useState<boolean>(() => {\r\n    const saved = localStorage.getItem('isDateBased');\r\n    return saved ? JSON.parse(saved) : false;\r\n  });\r\n\r\n  // 폴더에서 데이터 로드하는 공통 함수\r\n  const loadDataFromFolder = useCallback(async (folder: 'past' | 'present', month: string) => {\r\n    setLoading(true);\r\n    setError('');\r\n    \r\n    try {\r\n      // 폴더에서 데이터 로드 (202201.json 형식)\r\n      const monthCode = month.replace('-', '');\r\n      const response = await fetch(`/data/${folder}/${monthCode}.json`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data: SentenceData = await response.json();\r\n      console.log(`${folder} data loaded successfully:`, data);\r\n      \r\n      if (!data || !data.contents || !Array.isArray(data.contents) || data.contents.length === 0) {\r\n        throw new Error('Invalid data structure');\r\n      }\r\n      \r\n      setSentenceData(data);\r\n      \r\n      // 새로운 JSON 구조 처리\r\n      const firstContent = data.contents[0];\r\n      if (isDayContent(firstContent)) {\r\n        // 새로운 구조: day와 content를 가진 형식\r\n        setIsDateBased(false); // 카테고리 기반으로 처리\r\n        localStorage.setItem('isDateBased', JSON.stringify(false));\r\n        \r\n        // 사용 가능한 날짜들 설정\r\n        const days = data.contents\r\n          .filter((content: any) => content.day)\r\n          .map((content: any) => content.day);\r\n        \r\n        if (days.length > 0) {\r\n          setSelectedMonth(month);\r\n          localStorage.setItem('selectedMonth', month);\r\n          \r\n          // 첫 번째 날짜 선택\r\n          const firstDay = days[0];\r\n          const dateStr = `${month}-${String(firstDay).padStart(2, '0')}`;\r\n          setSelectedDate(dateStr);\r\n          localStorage.setItem('selectedDate', dateStr);\r\n          \r\n          // 첫 번째 날짜의 데이터로 초기화\r\n          const firstDayContent = data.contents[0];\r\n          if (isDayContent(firstDayContent) && firstDayContent.content && firstDayContent.content.length > 0) {\r\n            const savedCategory = localStorage.getItem('selectedCategory') || '전체';\r\n            setSelectedCategory(savedCategory);\r\n            localStorage.setItem('selectedCategory', savedCategory);\r\n          }\r\n        }\r\n      } else if (isDateBasedContent(firstContent)) {\r\n        // 기존 날짜 기반 구조\r\n        setIsDateBased(true);\r\n        localStorage.setItem('isDateBased', JSON.stringify(true));\r\n        setSentences(firstContent.sentences);\r\n        const actualDates = data.contents\r\n          .filter(isDateBasedContent)\r\n          .map(content => content.date);\r\n        setAvailableFiles(actualDates);\r\n        if (actualDates.length > 0) {\r\n          setSelectedMonth(month);\r\n          localStorage.setItem('selectedMonth', month);\r\n          const savedDate = localStorage.getItem('selectedDate');\r\n          const dateToSelect = savedDate && actualDates.includes(savedDate) ? savedDate : actualDates[0];\r\n          setSelectedDate(dateToSelect);\r\n          localStorage.setItem('selectedDate', dateToSelect);\r\n        }\r\n      } else if (isCategoryContent(firstContent)) {\r\n        // 기존 카테고리 기반 구조\r\n        setIsDateBased(false);\r\n        localStorage.setItem('isDateBased', JSON.stringify(false));\r\n        const savedCategory = localStorage.getItem('selectedCategory') || '전체';\r\n        setSelectedCategory(savedCategory);\r\n        localStorage.setItem('selectedCategory', savedCategory);\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error loading ${folder} data:`, err);\r\n      setError(err instanceof Error ? err.message : `${folder} 데이터를 불러올 수 없습니다.`);\r\n      setSentences([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // 특정 날짜의 컨텐츠 섹션 생성\r\n  const createContentSectionsForDay = useCallback((dayContent: DayContent) => {\r\n    const sections: ContentSection[] = [];\r\n    let idCounter = 1;\r\n    \r\n    if (dayContent.content) {\r\n      dayContent.content.forEach((categoryData: any) => {\r\n        // 카테고리 구분선\r\n        sections.push({\r\n          type: 'divider',\r\n          dividerText: categoryData.category\r\n        });\r\n        \r\n        categoryData.subcategories.forEach((subcategory: any) => {\r\n          // 서브카테고리 구분선\r\n          sections.push({\r\n            type: 'divider',\r\n            dividerText: subcategory.subcategory\r\n          });\r\n          \r\n          // 문장들\r\n          subcategory.sentences.forEach((sentence: any) => {\r\n            sections.push({\r\n              type: 'sentence',\r\n              sentence: {\r\n                ...sentence,\r\n                id: idCounter++\r\n              }\r\n            });\r\n          });\r\n        });\r\n      });\r\n    }\r\n    \r\n    return sections;\r\n  }, []);\r\n\r\n  // 컨텐츠 섹션 생성 (카테고리별)\r\n  const createContentSections = useCallback((category: string) => {\r\n    if (!sentenceData || !sentenceData.contents) return [];\r\n    \r\n    const sections: ContentSection[] = [];\r\n    let idCounter = 1;\r\n    \r\n    // 선택된 날짜의 데이터 가져오기\r\n    const day = parseInt(selectedDate.split('-')[2]);\r\n    const dayContent = sentenceData.contents.find((content): content is DayContent => isDayContent(content) && content.day === day);\r\n    \r\n    if (!dayContent || !dayContent.content) return [];\r\n    \r\n    if (category === '전체') {\r\n      // 전체 선택 시 해당 날짜의 모든 카테고리 표시\r\n      return createContentSectionsForDay(dayContent);\r\n    } else {\r\n      // 특정 카테고리 선택 시\r\n      const categoryData = dayContent.content.find((cat: any) => cat.category === category);\r\n      \r\n      if (categoryData) {\r\n        categoryData.subcategories.forEach((subcategory: any) => {\r\n          // 서브카테고리 구분선\r\n          sections.push({\r\n            type: 'divider',\r\n            dividerText: subcategory.subcategory\r\n          });\r\n          \r\n          // 문장들\r\n          subcategory.sentences.forEach((sentence: any) => {\r\n            sections.push({\r\n              type: 'sentence',\r\n              sentence: {\r\n                ...sentence,\r\n                id: idCounter++\r\n              }\r\n            });\r\n          });\r\n        });\r\n      }\r\n    }\r\n    \r\n    return sections;\r\n  }, [sentenceData, selectedDate, createContentSectionsForDay]);\r\n\r\n  // 과거 및 현재 월 목록 로드\r\n  useEffect(() => {\r\n    const loadAllMonths = async () => {\r\n      try {\r\n        // Past months 로드\r\n        const pastResponse = await fetch('/data/past/manifest.json');\r\n        if (pastResponse.ok) {\r\n          const pastData = await pastResponse.json();\r\n          const pastMonths = pastData.files.map((file: string) => {\r\n            const match = file.match(/(\\d{4})(\\d{2})\\.json$/);\r\n            if (match) {\r\n              return `${match[1]}-${match[2]}`;\r\n            }\r\n            return null;\r\n          }).filter(Boolean);\r\n          \r\n          setPastMonths(pastMonths);\r\n          console.log('Past months loaded:', pastMonths);\r\n        }\r\n        \r\n        // Present months 로드\r\n        const presentResponse = await fetch('/data/present/manifest.json');\r\n        if (presentResponse.ok) {\r\n          const presentData = await presentResponse.json();\r\n          const presentMonths = presentData.files.map((file: string) => {\r\n            const match = file.match(/(\\d{4})(\\d{2})\\.json$/);\r\n            if (match) {\r\n              return `${match[1]}-${match[2]}`;\r\n            }\r\n            return null;\r\n          }).filter(Boolean);\r\n          \r\n          setPresentMonths(presentMonths);\r\n          console.log('Present months loaded:', presentMonths);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error loading months:', err);\r\n      }\r\n    };\r\n    loadAllMonths();\r\n  }, []);\r\n\r\n  // 페이지 로드 시 저장된 상태 복원\r\n  useEffect(() => {\r\n    const loadSavedState = async () => {\r\n      const savedFolder = localStorage.getItem('lastSelectedFolder');\r\n      const savedMonth = localStorage.getItem('lastSelectedMonth');\r\n      \r\n      if (savedFolder && savedMonth && (savedFolder === 'past' || savedFolder === 'present')) {\r\n        try {\r\n          console.log('Restoring saved state:', savedFolder, savedMonth);\r\n          await loadDataFromFolder(savedFolder, savedMonth);\r\n        } catch (error) {\r\n          console.error('Error restoring saved state:', error);\r\n        }\r\n      }\r\n    };\r\n    \r\n    loadSavedState();\r\n  }, [loadDataFromFolder]);\r\n\r\n  // 날짜 기반 데이터일 때 저장된 날짜로 복원\r\n  useEffect(() => {\r\n    if (sentenceData && isDateBased && selectedDate) {\r\n      const selectedDateData = sentenceData.contents\r\n        .filter(isDateBasedContent)\r\n        .find(content => content.date === selectedDate);\r\n      if (selectedDateData) {\r\n        setSentences(selectedDateData.sentences);\r\n      }\r\n    }\r\n  }, [sentenceData, isDateBased, selectedDate]);\r\n\r\n  // 카테고리 기반 데이터일 때 컨텐츠 섹션 설정\r\n  useEffect(() => {\r\n    if (sentenceData && !isDateBased && selectedCategory) {\r\n      const sections = createContentSections(selectedCategory);\r\n      setContentSections(sections);\r\n      \r\n      const sentencesOnly = sections\r\n        .filter(section => section.type === 'sentence')\r\n        .map(section => section.sentence!)\r\n        .filter(Boolean);\r\n      setSentences(sentencesOnly);\r\n    }\r\n  }, [sentenceData, isDateBased, selectedCategory, createContentSections]);\r\n\r\n\r\n  // 월 변경 핸들러\r\n  const handleMonthChange = (month: string) => {\r\n    console.log('Month changed to:', month);\r\n    setSelectedMonth(month);\r\n    localStorage.setItem('selectedMonth', month);\r\n    \r\n    // 해당 월의 첫 번째 날짜 선택\r\n    const monthDates = availableFiles.filter(date => date.startsWith(month));\r\n    if (monthDates.length > 0) {\r\n      setSelectedDate(monthDates[0]);\r\n      localStorage.setItem('selectedDate', monthDates[0]);\r\n      // 여기서 새로운 데이터를 로드해야 함 (현재는 2025-08만 있음)\r\n    }\r\n  };\r\n\r\n  // 과거 월 선택 핸들러\r\n  const handlePastMonthChange = async (month: string) => {\r\n    console.log('Past month selected:', month);\r\n    localStorage.setItem('lastSelectedFolder', 'past');\r\n    localStorage.setItem('lastSelectedMonth', month);\r\n    setLastSelectedFolder('past');\r\n    setLastSelectedMonth(month);\r\n    await loadDataFromFolder('past', month);\r\n  };\r\n  \r\n  // 현재 월 선택 핸들러\r\n  const handlePresentMonthChange = async (month: string) => {\r\n    console.log('Present month selected:', month);\r\n    localStorage.setItem('lastSelectedFolder', 'present');\r\n    localStorage.setItem('lastSelectedMonth', month);\r\n    setLastSelectedFolder('present');\r\n    setLastSelectedMonth(month);\r\n    await loadDataFromFolder('present', month);\r\n  };\r\n\r\n  // 카테고리 변경 핸들러\r\n  const handleCategoryChange = (category: string) => {\r\n    console.log('Category changed to:', category);\r\n    setSelectedCategory(category);\r\n    localStorage.setItem('selectedCategory', category);\r\n    \r\n    // 컨텐츠 섹션 생성 (서브카테고리 구분선 포함)\r\n    const sections = createContentSections(category);\r\n    setContentSections(sections);\r\n    \r\n    // 기존 sentences도 업데이트 (호환성을 위해 유지)\r\n    const sentencesOnly = sections\r\n      .filter(section => section.type === 'sentence')\r\n      .map(section => section.sentence!)\r\n      .filter(Boolean);\r\n    setSentences(sentencesOnly);\r\n  };\r\n\r\n\r\n  // 날짜 변경 핸들러 (새로운 JSON 구조 지원)\r\n  const handleDateChange = (date: string) => {\r\n    console.log('Date changed to:', date);\r\n    setSelectedDate(date);\r\n    localStorage.setItem('selectedDate', date);\r\n    \r\n    // 새로운 JSON 구조에서 day로 데이터 찾기\r\n    if (sentenceData && sentenceData.contents) {\r\n      const day = parseInt(date.split('-')[2]);\r\n      const dayContent = sentenceData.contents.find((content): content is DayContent => isDayContent(content) && content.day === day);\r\n      \r\n      if (dayContent && dayContent.content) {\r\n        // 첫 번째 카테고리를 기본으로 선택\r\n        const firstCategory = dayContent.content[0]?.category || '전체';\r\n        setSelectedCategory(firstCategory);\r\n        localStorage.setItem('selectedCategory', firstCategory);\r\n        \r\n        // 해당 날짜의 모든 문장을 contentSections로 설정\r\n        const sections = createContentSectionsForDay(dayContent);\r\n        setContentSections(sections);\r\n        \r\n        const sentencesOnly = sections\r\n          .filter(section => section.type === 'sentence')\r\n          .map(section => section.sentence!)\r\n          .filter(Boolean);\r\n        setSentences(sentencesOnly);\r\n      } else {\r\n        console.log('No data found for day:', day);\r\n        setSentences([]);\r\n        setContentSections([]);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  // 다크 모드 토글\r\n  const toggleDarkMode = () => {\r\n    const newMode = !isDarkMode;\r\n    setIsDarkMode(newMode);\r\n    localStorage.setItem('isDarkMode', JSON.stringify(newMode));\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"loading\">데이터를 불러오는 중...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"error-message\">\r\n          오류: {error}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`app ${isDarkMode ? 'dark-mode' : ''}`}>\r\n      <header className=\"app-header\">\r\n        <h1 className=\"app-title\">中文学习</h1>\r\n        <button \r\n          className=\"dark-mode-toggle\"\r\n          onClick={toggleDarkMode}\r\n          aria-label=\"다크 모드 토글\"\r\n        >\r\n          {isDarkMode ? '☀️' : '🌙'}\r\n        </button>\r\n      </header>\r\n      \r\n      <Navigation\r\n        availableDates={availableFiles}\r\n        pastMonths={pastMonths}\r\n        presentMonths={presentMonths}\r\n        selectedMonth={selectedMonth}\r\n        selectedDate={selectedDate}\r\n        selectedCategory={selectedCategory}\r\n        sentenceData={sentenceData}\r\n        lastSelectedFolder={lastSelectedFolder}\r\n        lastSelectedMonth={lastSelectedMonth}\r\n        onMonthChange={handleMonthChange}\r\n        onDateChange={handleDateChange}\r\n        onCategoryChange={handleCategoryChange}\r\n        onPastMonthChange={handlePastMonthChange}\r\n        onPresentMonthChange={handlePresentMonthChange}\r\n      />\r\n      \r\n      <main className=\"main-content\">\r\n        <div className=\"sentences-container\">\r\n          {!isDateBased && contentSections.length > 0 ? (\r\n            // 카테고리 기반 렌더링 (서브카테고리 구분선 포함)\r\n            contentSections.map((section, index) => (\r\n              section.type === 'divider' ? (\r\n                <div key={`divider-${index}`} className=\"subcategory-divider\">\r\n                  <h3>{section.dividerText}</h3>\r\n                </div>\r\n              ) : (\r\n                <SentenceCard\r\n                  key={`sentence-${section.sentence?.id || index}`}\r\n                  sentence={section.sentence!}\r\n                />\r\n              )\r\n            ))\r\n          ) : (\r\n            // 날짜 기반 렌더링 또는 빈 상태\r\n            sentences.length > 0 ? (\r\n              sentences.map((sentence) => (\r\n                <SentenceCard\r\n                  key={sentence.id}\r\n                  sentence={sentence}\r\n                />\r\n              ))\r\n            ) : (\r\n              <div className=\"no-data\">\r\n                <p>표시할 문장이 없습니다.</p>\r\n                <p>날짜 또는 카테고리를 선택해주세요.</p>\r\n              </div>\r\n            )\r\n          )}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,SAAiCC,kBAAkB,EAAEC,iBAAiB,EAAEC,YAAY,QAAoC,SAAS;AACjI,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAqC,MAAM,CAAC;EAC9F,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAW,EAAE,CAAC;EAClE,MAAM,CAACgB,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAW,EAAE,CAAC;EAC1D,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAW,EAAE,CAAC;EAChE,MAAM,CAACoB,eAAe,EAAEC,kBAAkB,CAAC,GAAGrB,QAAQ,CAAW,EAAE,CAAC;EACpE,MAAM,CAACsB,aAAa,EAAEC,gBAAgB,CAAC,GAAGvB,QAAQ,CAAS,MAAM;IAC/D,OAAOwB,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,IAAI,SAAS;EAC3D,CAAC,CAAC;EACF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAG3B,QAAQ,CAAS,MAAM;IAC7D,OAAOwB,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,YAAY;EAC7D,CAAC,CAAC;EACF,MAAM,CAACG,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG7B,QAAQ,CAAS,MAAM;IACrE,OAAOwB,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC,IAAI,EAAE;EACvD,CAAC,CAAC;EACF,MAAM,CAACK,mBAAmB,CAAC,GAAG9B,QAAQ,CAAS,EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAAC+B,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGhC,QAAQ,CAAS,MAAM;IACzE,OAAOwB,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,IAAI,EAAE;EACzD,CAAC,CAAC;EACF,MAAM,CAACQ,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGlC,QAAQ,CAAS,MAAM;IACvE,OAAOwB,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC,IAAI,EAAE;EACxD,CAAC,CAAC;EACF,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGpC,QAAQ,CAAsB,IAAI,CAAC;EAC3E,MAAM,CAACqC,SAAS,EAAEC,YAAY,CAAC,GAAGtC,QAAQ,CAAa,EAAE,CAAC;EAC1D,MAAM,CAACuC,eAAe,EAAEC,kBAAkB,CAAC,GAAGxC,QAAQ,CAAmB,EAAE,CAAC;EAC5E,MAAM,CAACyC,OAAO,EAAEC,UAAU,CAAC,GAAG1C,QAAQ,CAAU,KAAK,CAAC;EACtD,MAAM,CAAC2C,KAAK,EAAEC,QAAQ,CAAC,GAAG5C,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAAC6C,UAAU,EAAEC,aAAa,CAAC,GAAG9C,QAAQ,CAAU,MAAM;IAC1D,MAAM+C,KAAK,GAAGvB,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAChD,OAAOsB,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACF,KAAK,CAAC,GAAG,KAAK;EAC1C,CAAC,CAAC;EACF,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGnD,QAAQ,CAAU,MAAM;IAC5D,MAAM+C,KAAK,GAAGvB,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACjD,OAAOsB,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACF,KAAK,CAAC,GAAG,KAAK;EAC1C,CAAC,CAAC;;EAEF;EACA,MAAMK,kBAAkB,GAAGlD,WAAW,CAAC,OAAOmD,MAA0B,EAAEC,KAAa,KAAK;IAC1FZ,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACF;MACA,MAAMW,SAAS,GAAGD,KAAK,CAACE,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;MACxC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,SAASL,MAAM,IAAIE,SAAS,OAAO,CAAC;MAEjE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAkB,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAChDC,OAAO,CAACC,GAAG,CAAC,GAAGZ,MAAM,4BAA4B,EAAES,IAAI,CAAC;MAExD,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACI,QAAQ,IAAI,CAACC,KAAK,CAACC,OAAO,CAACN,IAAI,CAACI,QAAQ,CAAC,IAAIJ,IAAI,CAACI,QAAQ,CAACG,MAAM,KAAK,CAAC,EAAE;QAC1F,MAAM,IAAIT,KAAK,CAAC,wBAAwB,CAAC;MAC3C;MAEAxB,eAAe,CAAC0B,IAAI,CAAC;;MAErB;MACA,MAAMQ,YAAY,GAAGR,IAAI,CAACI,QAAQ,CAAC,CAAC,CAAC;MACrC,IAAI3D,YAAY,CAAC+D,YAAY,CAAC,EAAE;QAC9B;QACAnB,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;QACvB3B,YAAY,CAAC+C,OAAO,CAAC,aAAa,EAAEvB,IAAI,CAACwB,SAAS,CAAC,KAAK,CAAC,CAAC;;QAE1D;QACA,MAAMC,IAAI,GAAGX,IAAI,CAACI,QAAQ,CACvBQ,MAAM,CAAEC,OAAY,IAAKA,OAAO,CAACC,GAAG,CAAC,CACrCC,GAAG,CAAEF,OAAY,IAAKA,OAAO,CAACC,GAAG,CAAC;QAErC,IAAIH,IAAI,CAACJ,MAAM,GAAG,CAAC,EAAE;UACnB9C,gBAAgB,CAAC+B,KAAK,CAAC;UACvB9B,YAAY,CAAC+C,OAAO,CAAC,eAAe,EAAEjB,KAAK,CAAC;;UAE5C;UACA,MAAMwB,QAAQ,GAAGL,IAAI,CAAC,CAAC,CAAC;UACxB,MAAMM,OAAO,GAAG,GAAGzB,KAAK,IAAI0B,MAAM,CAACF,QAAQ,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;UAC/DtD,eAAe,CAACoD,OAAO,CAAC;UACxBvD,YAAY,CAAC+C,OAAO,CAAC,cAAc,EAAEQ,OAAO,CAAC;;UAE7C;UACA,MAAMG,eAAe,GAAGpB,IAAI,CAACI,QAAQ,CAAC,CAAC,CAAC;UACxC,IAAI3D,YAAY,CAAC2E,eAAe,CAAC,IAAIA,eAAe,CAACP,OAAO,IAAIO,eAAe,CAACP,OAAO,CAACN,MAAM,GAAG,CAAC,EAAE;YAClG,MAAMc,aAAa,GAAG3D,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC,IAAI,IAAI;YACtEI,mBAAmB,CAACsD,aAAa,CAAC;YAClC3D,YAAY,CAAC+C,OAAO,CAAC,kBAAkB,EAAEY,aAAa,CAAC;UACzD;QACF;MACF,CAAC,MAAM,IAAI9E,kBAAkB,CAACiE,YAAY,CAAC,EAAE;QAC3C;QACAnB,cAAc,CAAC,IAAI,CAAC;QACpB3B,YAAY,CAAC+C,OAAO,CAAC,aAAa,EAAEvB,IAAI,CAACwB,SAAS,CAAC,IAAI,CAAC,CAAC;QACzDlC,YAAY,CAACgC,YAAY,CAACjC,SAAS,CAAC;QACpC,MAAM+C,WAAW,GAAGtB,IAAI,CAACI,QAAQ,CAC9BQ,MAAM,CAACrE,kBAAkB,CAAC,CAC1BwE,GAAG,CAACF,OAAO,IAAIA,OAAO,CAACU,IAAI,CAAC;QAC/BtE,iBAAiB,CAACqE,WAAW,CAAC;QAC9B,IAAIA,WAAW,CAACf,MAAM,GAAG,CAAC,EAAE;UAC1B9C,gBAAgB,CAAC+B,KAAK,CAAC;UACvB9B,YAAY,CAAC+C,OAAO,CAAC,eAAe,EAAEjB,KAAK,CAAC;UAC5C,MAAMgC,SAAS,GAAG9D,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;UACtD,MAAM8D,YAAY,GAAGD,SAAS,IAAIF,WAAW,CAACI,QAAQ,CAACF,SAAS,CAAC,GAAGA,SAAS,GAAGF,WAAW,CAAC,CAAC,CAAC;UAC9FzD,eAAe,CAAC4D,YAAY,CAAC;UAC7B/D,YAAY,CAAC+C,OAAO,CAAC,cAAc,EAAEgB,YAAY,CAAC;QACpD;MACF,CAAC,MAAM,IAAIjF,iBAAiB,CAACgE,YAAY,CAAC,EAAE;QAC1C;QACAnB,cAAc,CAAC,KAAK,CAAC;QACrB3B,YAAY,CAAC+C,OAAO,CAAC,aAAa,EAAEvB,IAAI,CAACwB,SAAS,CAAC,KAAK,CAAC,CAAC;QAC1D,MAAMW,aAAa,GAAG3D,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC,IAAI,IAAI;QACtEI,mBAAmB,CAACsD,aAAa,CAAC;QAClC3D,YAAY,CAAC+C,OAAO,CAAC,kBAAkB,EAAEY,aAAa,CAAC;MACzD;IACF,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZzB,OAAO,CAACrB,KAAK,CAAC,iBAAiBU,MAAM,QAAQ,EAAEoC,GAAG,CAAC;MACnD7C,QAAQ,CAAC6C,GAAG,YAAY7B,KAAK,GAAG6B,GAAG,CAACC,OAAO,GAAG,GAAGrC,MAAM,mBAAmB,CAAC;MAC3Ef,YAAY,CAAC,EAAE,CAAC;IAClB,CAAC,SAAS;MACRI,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMiD,2BAA2B,GAAGzF,WAAW,CAAE0F,UAAsB,IAAK;IAC1E,MAAMC,QAA0B,GAAG,EAAE;IACrC,IAAIC,SAAS,GAAG,CAAC;IAEjB,IAAIF,UAAU,CAACjB,OAAO,EAAE;MACtBiB,UAAU,CAACjB,OAAO,CAACoB,OAAO,CAAEC,YAAiB,IAAK;QAChD;QACAH,QAAQ,CAACI,IAAI,CAAC;UACZC,IAAI,EAAE,SAAS;UACfC,WAAW,EAAEH,YAAY,CAACI;QAC5B,CAAC,CAAC;QAEFJ,YAAY,CAACK,aAAa,CAACN,OAAO,CAAEO,WAAgB,IAAK;UACvD;UACAT,QAAQ,CAACI,IAAI,CAAC;YACZC,IAAI,EAAE,SAAS;YACfC,WAAW,EAAEG,WAAW,CAACA;UAC3B,CAAC,CAAC;;UAEF;UACAA,WAAW,CAACjE,SAAS,CAAC0D,OAAO,CAAEQ,QAAa,IAAK;YAC/CV,QAAQ,CAACI,IAAI,CAAC;cACZC,IAAI,EAAE,UAAU;cAChBK,QAAQ,EAAE;gBACR,GAAGA,QAAQ;gBACXC,EAAE,EAAEV,SAAS;cACf;YACF,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;IAEA,OAAOD,QAAQ;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMY,qBAAqB,GAAGvG,WAAW,CAAEkG,QAAgB,IAAK;IAC9D,IAAI,CAACjE,YAAY,IAAI,CAACA,YAAY,CAAC+B,QAAQ,EAAE,OAAO,EAAE;IAEtD,MAAM2B,QAA0B,GAAG,EAAE;IACrC,IAAIC,SAAS,GAAG,CAAC;;IAEjB;IACA,MAAMlB,GAAG,GAAG8B,QAAQ,CAAChF,YAAY,CAACiF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,MAAMf,UAAU,GAAGzD,YAAY,CAAC+B,QAAQ,CAAC0C,IAAI,CAAEjC,OAAO,IAA4BpE,YAAY,CAACoE,OAAO,CAAC,IAAIA,OAAO,CAACC,GAAG,KAAKA,GAAG,CAAC;IAE/H,IAAI,CAACgB,UAAU,IAAI,CAACA,UAAU,CAACjB,OAAO,EAAE,OAAO,EAAE;IAEjD,IAAIyB,QAAQ,KAAK,IAAI,EAAE;MACrB;MACA,OAAOT,2BAA2B,CAACC,UAAU,CAAC;IAChD,CAAC,MAAM;MACL;MACA,MAAMI,YAAY,GAAGJ,UAAU,CAACjB,OAAO,CAACiC,IAAI,CAAEC,GAAQ,IAAKA,GAAG,CAACT,QAAQ,KAAKA,QAAQ,CAAC;MAErF,IAAIJ,YAAY,EAAE;QAChBA,YAAY,CAACK,aAAa,CAACN,OAAO,CAAEO,WAAgB,IAAK;UACvD;UACAT,QAAQ,CAACI,IAAI,CAAC;YACZC,IAAI,EAAE,SAAS;YACfC,WAAW,EAAEG,WAAW,CAACA;UAC3B,CAAC,CAAC;;UAEF;UACAA,WAAW,CAACjE,SAAS,CAAC0D,OAAO,CAAEQ,QAAa,IAAK;YAC/CV,QAAQ,CAACI,IAAI,CAAC;cACZC,IAAI,EAAE,UAAU;cAChBK,QAAQ,EAAE;gBACR,GAAGA,QAAQ;gBACXC,EAAE,EAAEV,SAAS;cACf;YACF,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ;IACF;IAEA,OAAOD,QAAQ;EACjB,CAAC,EAAE,CAAC1D,YAAY,EAAET,YAAY,EAAEiE,2BAA2B,CAAC,CAAC;;EAE7D;EACA1F,SAAS,CAAC,MAAM;IACd,MAAM6G,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF;QACA,MAAMC,YAAY,GAAG,MAAMrD,KAAK,CAAC,0BAA0B,CAAC;QAC5D,IAAIqD,YAAY,CAACpD,EAAE,EAAE;UACnB,MAAMqD,QAAQ,GAAG,MAAMD,YAAY,CAAChD,IAAI,CAAC,CAAC;UAC1C,MAAM/C,UAAU,GAAGgG,QAAQ,CAACC,KAAK,CAACpC,GAAG,CAAEqC,IAAY,IAAK;YACtD,MAAMC,KAAK,GAAGD,IAAI,CAACC,KAAK,CAAC,uBAAuB,CAAC;YACjD,IAAIA,KAAK,EAAE;cACT,OAAO,GAAGA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;YAClC;YACA,OAAO,IAAI;UACb,CAAC,CAAC,CAACzC,MAAM,CAAC0C,OAAO,CAAC;UAElBnG,aAAa,CAACD,UAAU,CAAC;UACzBgD,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEjD,UAAU,CAAC;QAChD;;QAEA;QACA,MAAMqG,eAAe,GAAG,MAAM3D,KAAK,CAAC,6BAA6B,CAAC;QAClE,IAAI2D,eAAe,CAAC1D,EAAE,EAAE;UACtB,MAAM2D,WAAW,GAAG,MAAMD,eAAe,CAACtD,IAAI,CAAC,CAAC;UAChD,MAAM7C,aAAa,GAAGoG,WAAW,CAACL,KAAK,CAACpC,GAAG,CAAEqC,IAAY,IAAK;YAC5D,MAAMC,KAAK,GAAGD,IAAI,CAACC,KAAK,CAAC,uBAAuB,CAAC;YACjD,IAAIA,KAAK,EAAE;cACT,OAAO,GAAGA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;YAClC;YACA,OAAO,IAAI;UACb,CAAC,CAAC,CAACzC,MAAM,CAAC0C,OAAO,CAAC;UAElBjG,gBAAgB,CAACD,aAAa,CAAC;UAC/B8C,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE/C,aAAa,CAAC;QACtD;MACF,CAAC,CAAC,OAAOuE,GAAG,EAAE;QACZzB,OAAO,CAACrB,KAAK,CAAC,uBAAuB,EAAE8C,GAAG,CAAC;MAC7C;IACF,CAAC;IACDqB,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA7G,SAAS,CAAC,MAAM;IACd,MAAMsH,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMC,WAAW,GAAGhG,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC;MAC9D,MAAMgG,UAAU,GAAGjG,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC;MAE5D,IAAI+F,WAAW,IAAIC,UAAU,KAAKD,WAAW,KAAK,MAAM,IAAIA,WAAW,KAAK,SAAS,CAAC,EAAE;QACtF,IAAI;UACFxD,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEuD,WAAW,EAAEC,UAAU,CAAC;UAC9D,MAAMrE,kBAAkB,CAACoE,WAAW,EAAEC,UAAU,CAAC;QACnD,CAAC,CAAC,OAAO9E,KAAK,EAAE;UACdqB,OAAO,CAACrB,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACtD;MACF;IACF,CAAC;IAED4E,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACnE,kBAAkB,CAAC,CAAC;;EAExB;EACAnD,SAAS,CAAC,MAAM;IACd,IAAIkC,YAAY,IAAIe,WAAW,IAAIxB,YAAY,EAAE;MAC/C,MAAMgG,gBAAgB,GAAGvF,YAAY,CAAC+B,QAAQ,CAC3CQ,MAAM,CAACrE,kBAAkB,CAAC,CAC1BuG,IAAI,CAACjC,OAAO,IAAIA,OAAO,CAACU,IAAI,KAAK3D,YAAY,CAAC;MACjD,IAAIgG,gBAAgB,EAAE;QACpBpF,YAAY,CAACoF,gBAAgB,CAACrF,SAAS,CAAC;MAC1C;IACF;EACF,CAAC,EAAE,CAACF,YAAY,EAAEe,WAAW,EAAExB,YAAY,CAAC,CAAC;;EAE7C;EACAzB,SAAS,CAAC,MAAM;IACd,IAAIkC,YAAY,IAAI,CAACe,WAAW,IAAItB,gBAAgB,EAAE;MACpD,MAAMiE,QAAQ,GAAGY,qBAAqB,CAAC7E,gBAAgB,CAAC;MACxDY,kBAAkB,CAACqD,QAAQ,CAAC;MAE5B,MAAM8B,aAAa,GAAG9B,QAAQ,CAC3BnB,MAAM,CAACkD,OAAO,IAAIA,OAAO,CAAC1B,IAAI,KAAK,UAAU,CAAC,CAC9CrB,GAAG,CAAC+C,OAAO,IAAIA,OAAO,CAACrB,QAAS,CAAC,CACjC7B,MAAM,CAAC0C,OAAO,CAAC;MAClB9E,YAAY,CAACqF,aAAa,CAAC;IAC7B;EACF,CAAC,EAAE,CAACxF,YAAY,EAAEe,WAAW,EAAEtB,gBAAgB,EAAE6E,qBAAqB,CAAC,CAAC;;EAGxE;EACA,MAAMoB,iBAAiB,GAAIvE,KAAa,IAAK;IAC3CU,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEX,KAAK,CAAC;IACvC/B,gBAAgB,CAAC+B,KAAK,CAAC;IACvB9B,YAAY,CAAC+C,OAAO,CAAC,eAAe,EAAEjB,KAAK,CAAC;;IAE5C;IACA,MAAMwE,UAAU,GAAGhH,cAAc,CAAC4D,MAAM,CAACW,IAAI,IAAIA,IAAI,CAAC0C,UAAU,CAACzE,KAAK,CAAC,CAAC;IACxE,IAAIwE,UAAU,CAACzD,MAAM,GAAG,CAAC,EAAE;MACzB1C,eAAe,CAACmG,UAAU,CAAC,CAAC,CAAC,CAAC;MAC9BtG,YAAY,CAAC+C,OAAO,CAAC,cAAc,EAAEuD,UAAU,CAAC,CAAC,CAAC,CAAC;MACnD;IACF;EACF,CAAC;;EAED;EACA,MAAME,qBAAqB,GAAG,MAAO1E,KAAa,IAAK;IACrDU,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEX,KAAK,CAAC;IAC1C9B,YAAY,CAAC+C,OAAO,CAAC,oBAAoB,EAAE,MAAM,CAAC;IAClD/C,YAAY,CAAC+C,OAAO,CAAC,mBAAmB,EAAEjB,KAAK,CAAC;IAChDtB,qBAAqB,CAAC,MAAM,CAAC;IAC7BE,oBAAoB,CAACoB,KAAK,CAAC;IAC3B,MAAMF,kBAAkB,CAAC,MAAM,EAAEE,KAAK,CAAC;EACzC,CAAC;;EAED;EACA,MAAM2E,wBAAwB,GAAG,MAAO3E,KAAa,IAAK;IACxDU,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEX,KAAK,CAAC;IAC7C9B,YAAY,CAAC+C,OAAO,CAAC,oBAAoB,EAAE,SAAS,CAAC;IACrD/C,YAAY,CAAC+C,OAAO,CAAC,mBAAmB,EAAEjB,KAAK,CAAC;IAChDtB,qBAAqB,CAAC,SAAS,CAAC;IAChCE,oBAAoB,CAACoB,KAAK,CAAC;IAC3B,MAAMF,kBAAkB,CAAC,SAAS,EAAEE,KAAK,CAAC;EAC5C,CAAC;;EAED;EACA,MAAM4E,oBAAoB,GAAI9B,QAAgB,IAAK;IACjDpC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEmC,QAAQ,CAAC;IAC7CvE,mBAAmB,CAACuE,QAAQ,CAAC;IAC7B5E,YAAY,CAAC+C,OAAO,CAAC,kBAAkB,EAAE6B,QAAQ,CAAC;;IAElD;IACA,MAAMP,QAAQ,GAAGY,qBAAqB,CAACL,QAAQ,CAAC;IAChD5D,kBAAkB,CAACqD,QAAQ,CAAC;;IAE5B;IACA,MAAM8B,aAAa,GAAG9B,QAAQ,CAC3BnB,MAAM,CAACkD,OAAO,IAAIA,OAAO,CAAC1B,IAAI,KAAK,UAAU,CAAC,CAC9CrB,GAAG,CAAC+C,OAAO,IAAIA,OAAO,CAACrB,QAAS,CAAC,CACjC7B,MAAM,CAAC0C,OAAO,CAAC;IAClB9E,YAAY,CAACqF,aAAa,CAAC;EAC7B,CAAC;;EAGD;EACA,MAAMQ,gBAAgB,GAAI9C,IAAY,IAAK;IACzCrB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEoB,IAAI,CAAC;IACrC1D,eAAe,CAAC0D,IAAI,CAAC;IACrB7D,YAAY,CAAC+C,OAAO,CAAC,cAAc,EAAEc,IAAI,CAAC;;IAE1C;IACA,IAAIlD,YAAY,IAAIA,YAAY,CAAC+B,QAAQ,EAAE;MACzC,MAAMU,GAAG,GAAG8B,QAAQ,CAACrB,IAAI,CAACsB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACxC,MAAMf,UAAU,GAAGzD,YAAY,CAAC+B,QAAQ,CAAC0C,IAAI,CAAEjC,OAAO,IAA4BpE,YAAY,CAACoE,OAAO,CAAC,IAAIA,OAAO,CAACC,GAAG,KAAKA,GAAG,CAAC;MAE/H,IAAIgB,UAAU,IAAIA,UAAU,CAACjB,OAAO,EAAE;QAAA,IAAAyD,oBAAA;QACpC;QACA,MAAMC,aAAa,GAAG,EAAAD,oBAAA,GAAAxC,UAAU,CAACjB,OAAO,CAAC,CAAC,CAAC,cAAAyD,oBAAA,uBAArBA,oBAAA,CAAuBhC,QAAQ,KAAI,IAAI;QAC7DvE,mBAAmB,CAACwG,aAAa,CAAC;QAClC7G,YAAY,CAAC+C,OAAO,CAAC,kBAAkB,EAAE8D,aAAa,CAAC;;QAEvD;QACA,MAAMxC,QAAQ,GAAGF,2BAA2B,CAACC,UAAU,CAAC;QACxDpD,kBAAkB,CAACqD,QAAQ,CAAC;QAE5B,MAAM8B,aAAa,GAAG9B,QAAQ,CAC3BnB,MAAM,CAACkD,OAAO,IAAIA,OAAO,CAAC1B,IAAI,KAAK,UAAU,CAAC,CAC9CrB,GAAG,CAAC+C,OAAO,IAAIA,OAAO,CAACrB,QAAS,CAAC,CACjC7B,MAAM,CAAC0C,OAAO,CAAC;QAClB9E,YAAY,CAACqF,aAAa,CAAC;MAC7B,CAAC,MAAM;QACL3D,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEW,GAAG,CAAC;QAC1CtC,YAAY,CAAC,EAAE,CAAC;QAChBE,kBAAkB,CAAC,EAAE,CAAC;MACxB;IACF;EACF,CAAC;;EAGD;EACA,MAAM8F,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,OAAO,GAAG,CAAC1F,UAAU;IAC3BC,aAAa,CAACyF,OAAO,CAAC;IACtB/G,YAAY,CAAC+C,OAAO,CAAC,YAAY,EAAEvB,IAAI,CAACwB,SAAS,CAAC+D,OAAO,CAAC,CAAC;EAC7D,CAAC;EAED,IAAI9F,OAAO,EAAE;IACX,oBACEhC,OAAA;MAAK+H,SAAS,EAAC,KAAK;MAAAC,QAAA,eAClBhI,OAAA;QAAK+H,SAAS,EAAC,SAAS;QAAAC,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EAEV;EAEA,IAAIlG,KAAK,EAAE;IACT,oBACElC,OAAA;MAAK+H,SAAS,EAAC,KAAK;MAAAC,QAAA,eAClBhI,OAAA;QAAK+H,SAAS,EAAC,eAAe;QAAAC,QAAA,GAAC,gBACzB,EAAC9F,KAAK;MAAA;QAAA+F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;EAEA,oBACEpI,OAAA;IAAK+H,SAAS,EAAE,OAAO3F,UAAU,GAAG,WAAW,GAAG,EAAE,EAAG;IAAA4F,QAAA,gBACrDhI,OAAA;MAAQ+H,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5BhI,OAAA;QAAI+H,SAAS,EAAC,WAAW;QAAAC,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnCpI,OAAA;QACE+H,SAAS,EAAC,kBAAkB;QAC5BM,OAAO,EAAER,cAAe;QACxB,cAAW,wCAAU;QAAAG,QAAA,EAEpB5F,UAAU,GAAG,IAAI,GAAG;MAAI;QAAA6F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAETpI,OAAA,CAACN,UAAU;MACT4I,cAAc,EAAEjI,cAAe;MAC/BE,UAAU,EAAEA,UAAW;MACvBE,aAAa,EAAEA,aAAc;MAC7BI,aAAa,EAAEA,aAAc;MAC7BI,YAAY,EAAEA,YAAa;MAC3BE,gBAAgB,EAAEA,gBAAiB;MACnCO,YAAY,EAAEA,YAAa;MAC3BJ,kBAAkB,EAAEA,kBAAmB;MACvCE,iBAAiB,EAAEA,iBAAkB;MACrC+G,aAAa,EAAEnB,iBAAkB;MACjCoB,YAAY,EAAEd,gBAAiB;MAC/Be,gBAAgB,EAAEhB,oBAAqB;MACvCiB,iBAAiB,EAAEnB,qBAAsB;MACzCoB,oBAAoB,EAAEnB;IAAyB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eAEFpI,OAAA;MAAM+H,SAAS,EAAC,cAAc;MAAAC,QAAA,eAC5BhI,OAAA;QAAK+H,SAAS,EAAC,qBAAqB;QAAAC,QAAA,EACjC,CAACvF,WAAW,IAAIX,eAAe,CAAC8B,MAAM,GAAG,CAAC;QACzC;QACA9B,eAAe,CAACsC,GAAG,CAAC,CAAC+C,OAAO,EAAEyB,KAAK;UAAA,IAAAC,iBAAA;UAAA,OACjC1B,OAAO,CAAC1B,IAAI,KAAK,SAAS,gBACxBzF,OAAA;YAA8B+H,SAAS,EAAC,qBAAqB;YAAAC,QAAA,eAC3DhI,OAAA;cAAAgI,QAAA,EAAKb,OAAO,CAACzB;YAAW;cAAAuC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK;UAAC,GADtB,WAAWQ,KAAK,EAAE;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEvB,CAAC,gBAENpI,OAAA,CAACL,YAAY;YAEXmG,QAAQ,EAAEqB,OAAO,CAACrB;UAAU,GADvB,YAAY,EAAA+C,iBAAA,GAAA1B,OAAO,CAACrB,QAAQ,cAAA+C,iBAAA,uBAAhBA,iBAAA,CAAkB9C,EAAE,KAAI6C,KAAK,EAAE;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEjD,CACF;QAAA,CACF,CAAC;QAEF;QACAxG,SAAS,CAACgC,MAAM,GAAG,CAAC,GAClBhC,SAAS,CAACwC,GAAG,CAAE0B,QAAQ,iBACrB9F,OAAA,CAACL,YAAY;UAEXmG,QAAQ,EAAEA;QAAS,GADdA,QAAQ,CAACC,EAAE;UAAAkC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEjB,CACF,CAAC,gBAEFpI,OAAA;UAAK+H,SAAS,EAAC,SAAS;UAAAC,QAAA,gBACtBhI,OAAA;YAAAgI,QAAA,EAAG;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACpBpI,OAAA;YAAAgI,QAAA,EAAG;UAAmB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB;MAER;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAClI,EAAA,CAzdID,GAAa;AAAA6I,EAAA,GAAb7I,GAAa;AA2dnB,eAAeA,GAAG;AAAC,IAAA6I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}