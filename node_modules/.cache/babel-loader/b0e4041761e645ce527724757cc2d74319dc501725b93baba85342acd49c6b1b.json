{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\chinesestudy\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Navigation from './components/Navigation';\nimport SentenceCard from './components/SentenceCard';\nimport './styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [availableFiles, setAvailableFiles] = useState([]);\n  const [selectedMonth, setSelectedMonth] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  const [sentenceData, setSentenceData] = useState(null);\n  const [sentences, setSentences] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // 사용 가능한 JSON 파일 목록 가져오기\n  useEffect(() => {\n    const fetchAvailableFiles = async () => {\n      try {\n        // 실제로는 서버 API에서 가져와야 하지만, 현재는 하드코딩\n        // 월별로 파일이 추가되면 여기에 추가\n        const files = ['202508' // sentences202508.json\n        // '202509', // sentences202509.json (예시)\n        // '202510', // sentences202510.json (예시)\n        ];\n\n        // 각 파일에서 사용 가능한 날짜 추출\n        const dates = [];\n        for (const month of files) {\n          try {\n            const response = await fetch(`/data/sentences${month}.json`);\n            console.log(`Fetching ${month}:`, response.status);\n            if (response.ok) {\n              const data = await response.json();\n              console.log('Data loaded:', data);\n              // 현재는 단일 날짜만 있지만, 추후 여러 날짜 지원 가능\n              const dateStr = month + '07'; // 2025-08-07 -> 07\n              dates.push(dateStr);\n            }\n          } catch (error) {\n            console.error(`Failed to load ${month}:`, error);\n          }\n        }\n        console.log('Available dates:', dates);\n        if (dates.length > 0) {\n          setAvailableFiles(dates);\n          const defaultMonth = dates[0].substring(0, 6);\n          setSelectedMonth(defaultMonth);\n          setSelectedDate(dates[0]);\n        } else {\n          setError('사용 가능한 데이터가 없습니다.');\n        }\n      } catch (err) {\n        console.error('Error in fetchAvailableFiles:', err);\n        setError('파일 목록을 불러올 수 없습니다.');\n      }\n    };\n    fetchAvailableFiles();\n  }, []);\n\n  // 선택된 날짜의 데이터 로드\n  useEffect(() => {\n    if (!selectedDate) return;\n    const loadSentenceData = async () => {\n      setLoading(true);\n      setError('');\n      try {\n        const month = selectedDate.substring(0, 6);\n        const response = await fetch(`/data/sentences${month}.json`);\n        if (!response.ok) {\n          throw new Error('데이터를 불러올 수 없습니다.');\n        }\n        const data = await response.json();\n        setSentenceData(data);\n        setSentences(data.contents.sentences);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : '알 수 없는 오류가 발생했습니다.');\n        setSentences([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadSentenceData();\n  }, [selectedDate]);\n  const handleMonthChange = month => {\n    setSelectedMonth(month);\n    const monthDates = availableFiles.filter(date => date.startsWith(month));\n    if (monthDates.length > 0) {\n      setSelectedDate(monthDates[0]);\n    }\n  };\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n  const formatDateDisplay = () => {\n    if (!sentenceData) return '';\n    const year = selectedDate.substring(0, 4);\n    const month = selectedDate.substring(4, 6);\n    const day = selectedDate.substring(6, 8);\n    return `${year}년 ${month}월 ${day}일`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uC911\\uAD6D\\uC5B4 \\uBB38\\uC7A5 \\uD559\\uC2B5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), sentenceData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-info\",\n        children: formatDateDisplay()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), availableFiles.length > 0 && /*#__PURE__*/_jsxDEV(Navigation, {\n      availableDates: availableFiles,\n      selectedMonth: selectedMonth,\n      selectedDate: selectedDate,\n      onMonthChange: handleMonthChange,\n      onDateChange: handleDateChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"content\",\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uC624\\uB958 \\uBC1C\\uC0DD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), !loading && !error && sentences.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sentences-container\",\n        children: sentences.map(sentence => /*#__PURE__*/_jsxDEV(SentenceCard, {\n          sentence: sentence\n        }, sentence.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"w/zD18pp0CVMo6zDGuHWPTsDpx8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navigation","SentenceCard","jsxDEV","_jsxDEV","App","_s","availableFiles","setAvailableFiles","selectedMonth","setSelectedMonth","selectedDate","setSelectedDate","sentenceData","setSentenceData","sentences","setSentences","loading","setLoading","error","setError","fetchAvailableFiles","files","dates","month","response","fetch","console","log","status","ok","data","json","dateStr","push","length","defaultMonth","substring","err","loadSentenceData","Error","contents","message","handleMonthChange","monthDates","filter","date","startsWith","handleDateChange","formatDateDisplay","year","day","className","children","fileName","_jsxFileName","lineNumber","columnNumber","availableDates","onMonthChange","onDateChange","map","sentence","id","_c","$RefreshReg$"],"sources":["D:/Coding/chinesestudy/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Navigation from './components/Navigation';\nimport SentenceCard from './components/SentenceCard';\nimport { SentenceData, Sentence } from './types';\nimport './styles/App.css';\n\nconst App: React.FC = () => {\n  const [availableFiles, setAvailableFiles] = useState<string[]>([]);\n  const [selectedMonth, setSelectedMonth] = useState<string>('');\n  const [selectedDate, setSelectedDate] = useState<string>('');\n  const [sentenceData, setSentenceData] = useState<SentenceData | null>(null);\n  const [sentences, setSentences] = useState<Sentence[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n\n  // 사용 가능한 JSON 파일 목록 가져오기\n  useEffect(() => {\n    const fetchAvailableFiles = async () => {\n      try {\n        // 실제로는 서버 API에서 가져와야 하지만, 현재는 하드코딩\n        // 월별로 파일이 추가되면 여기에 추가\n        const files = [\n          '202508', // sentences202508.json\n          // '202509', // sentences202509.json (예시)\n          // '202510', // sentences202510.json (예시)\n        ];\n        \n        // 각 파일에서 사용 가능한 날짜 추출\n        const dates: string[] = [];\n        for (const month of files) {\n          try {\n            const response = await fetch(`/data/sentences${month}.json`);\n            console.log(`Fetching ${month}:`, response.status);\n            if (response.ok) {\n              const data: SentenceData = await response.json();\n              console.log('Data loaded:', data);\n              // 현재는 단일 날짜만 있지만, 추후 여러 날짜 지원 가능\n              const dateStr = month + '07'; // 2025-08-07 -> 07\n              dates.push(dateStr);\n            }\n          } catch (error) {\n            console.error(`Failed to load ${month}:`, error);\n          }\n        }\n        \n        console.log('Available dates:', dates);\n        if (dates.length > 0) {\n          setAvailableFiles(dates);\n          const defaultMonth = dates[0].substring(0, 6);\n          setSelectedMonth(defaultMonth);\n          setSelectedDate(dates[0]);\n        } else {\n          setError('사용 가능한 데이터가 없습니다.');\n        }\n      } catch (err) {\n        console.error('Error in fetchAvailableFiles:', err);\n        setError('파일 목록을 불러올 수 없습니다.');\n      }\n    };\n\n    fetchAvailableFiles();\n  }, []);\n\n  // 선택된 날짜의 데이터 로드\n  useEffect(() => {\n    if (!selectedDate) return;\n\n    const loadSentenceData = async () => {\n      setLoading(true);\n      setError('');\n      \n      try {\n        const month = selectedDate.substring(0, 6);\n        const response = await fetch(`/data/sentences${month}.json`);\n        \n        if (!response.ok) {\n          throw new Error('데이터를 불러올 수 없습니다.');\n        }\n        \n        const data: SentenceData = await response.json();\n        setSentenceData(data);\n        setSentences(data.contents.sentences);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : '알 수 없는 오류가 발생했습니다.');\n        setSentences([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadSentenceData();\n  }, [selectedDate]);\n\n  const handleMonthChange = (month: string) => {\n    setSelectedMonth(month);\n    const monthDates = availableFiles.filter(date => date.startsWith(month));\n    if (monthDates.length > 0) {\n      setSelectedDate(monthDates[0]);\n    }\n  };\n\n  const handleDateChange = (date: string) => {\n    setSelectedDate(date);\n  };\n\n  const formatDateDisplay = () => {\n    if (!sentenceData) return '';\n    const year = selectedDate.substring(0, 4);\n    const month = selectedDate.substring(4, 6);\n    const day = selectedDate.substring(6, 8);\n    return `${year}년 ${month}월 ${day}일`;\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>중국어 문장 학습</h1>\n        {sentenceData && (\n          <div className=\"date-info\">{formatDateDisplay()}</div>\n        )}\n      </header>\n\n      {availableFiles.length > 0 && (\n        <Navigation\n          availableDates={availableFiles}\n          selectedMonth={selectedMonth}\n          selectedDate={selectedDate}\n          onMonthChange={handleMonthChange}\n          onDateChange={handleDateChange}\n        />\n      )}\n\n      <main className=\"content\">\n        {loading && <div className=\"loading\">데이터를 불러오는 중...</div>}\n        \n        {error && (\n          <div className=\"error\">\n            <h2>오류 발생</h2>\n            <p>{error}</p>\n          </div>\n        )}\n        \n        {!loading && !error && sentences.length > 0 && (\n          <div className=\"sentences-container\">\n            {sentences.map((sentence) => (\n              <SentenceCard key={sentence.id} sentence={sentence} />\n            ))}\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}