{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\chinesestudy\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Navigation from './components/Navigation';\nimport SentenceCard from './components/SentenceCard';\nimport { isDateBasedContent, isCategoryContent } from './types';\nimport './styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [availableFiles, setAvailableFiles] = useState([]);\n  const [pastMonths, setPastMonths] = useState([]);\n  const [presentMonths, setPresentMonths] = useState([]);\n  const [selectedMonth, setSelectedMonth] = useState('2025-08');\n  const [selectedDate, setSelectedDate] = useState('2025-08-07');\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [selectedSubcategory] = useState('');\n  const [lastSelectedFolder, setLastSelectedFolder] = useState(() => {\n    return localStorage.getItem('lastSelectedFolder') || '';\n  });\n  const [lastSelectedMonth, setLastSelectedMonth] = useState(() => {\n    return localStorage.getItem('lastSelectedMonth') || '';\n  });\n  const [sentenceData, setSentenceData] = useState(null);\n  const [sentences, setSentences] = useState([]);\n  const [contentSections, setContentSections] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    const saved = localStorage.getItem('isDarkMode');\n    return saved ? JSON.parse(saved) : false;\n  });\n  const [isDateBased, setIsDateBased] = useState(false);\n\n  // 과거 및 현재 월 목록 로드\n  useEffect(() => {\n    const loadAllMonths = async () => {\n      try {\n        // 과거 파일 목록 로드\n        const pastManifestResponse = await fetch('/data/past/manifest.json');\n        if (pastManifestResponse.ok) {\n          const pastManifest = await pastManifestResponse.json();\n          const pastFiles = pastManifest.files || [];\n\n          // 파일명에서 월 정보 추출 (202201.json -> 2022-01)\n          const pastMonths = pastFiles.map(filename => {\n            const match = filename.match(/(\\d{4})(\\d{2})\\.json/);\n            if (match) {\n              return `${match[1]}-${match[2]}`;\n            }\n            return null;\n          }).filter(Boolean);\n          setPastMonths(pastMonths);\n          console.log('Past months loaded:', pastMonths);\n        }\n\n        // 현재 파일 목록 로드\n        const presentManifestResponse = await fetch('/data/present/manifest.json');\n        if (presentManifestResponse.ok) {\n          const presentManifest = await presentManifestResponse.json();\n          const presentFiles = presentManifest.files || [];\n\n          // 파일명에서 월 정보 추출 (202508.json -> 2025-08)\n          const presentMonths = presentFiles.map(filename => {\n            const match = filename.match(/(\\d{4})(\\d{2})\\.json/);\n            if (match) {\n              return `${match[1]}-${match[2]}`;\n            }\n            return null;\n          }).filter(Boolean);\n          setPresentMonths(presentMonths);\n          console.log('Present months loaded:', presentMonths);\n        }\n      } catch (err) {\n        console.error('Error loading months:', err);\n      }\n    };\n    loadAllMonths();\n  }, []);\n\n  // 초기 로드 및 localStorage에서 마지막 선택 복원\n  useEffect(() => {\n    const restoreLastSelection = async () => {\n      if (lastSelectedFolder && lastSelectedMonth) {\n        console.log('Restoring last selection:', lastSelectedFolder, lastSelectedMonth);\n        await loadDataFromFolder(lastSelectedFolder, lastSelectedMonth);\n      } else {\n        setLoading(false);\n      }\n    };\n\n    // 월 목록이 로드된 후에 마지막 선택 복원\n    setTimeout(restoreLastSelection, 100);\n  }, [lastSelectedFolder, lastSelectedMonth, loadDataFromFolder]);\n\n  // 월 변경 핸들러\n  const handleMonthChange = month => {\n    console.log('Month changed to:', month);\n    setSelectedMonth(month);\n\n    // 해당 월의 첫 번째 날짜 선택\n    const monthDates = availableFiles.filter(date => date.startsWith(month));\n    if (monthDates.length > 0) {\n      setSelectedDate(monthDates[0]);\n      // 여기서 새로운 데이터를 로드해야 함 (현재는 2025-08만 있음)\n    }\n  };\n\n  // 과거 월 선택 핸들러\n  const handlePastMonthChange = async month => {\n    console.log('Past month selected:', month);\n    localStorage.setItem('lastSelectedFolder', 'past');\n    localStorage.setItem('lastSelectedMonth', month);\n    setLastSelectedFolder('past');\n    setLastSelectedMonth(month);\n    await loadDataFromFolder('past', month);\n  };\n\n  // 현재 월 선택 핸들러\n  const handlePresentMonthChange = async month => {\n    console.log('Present month selected:', month);\n    localStorage.setItem('lastSelectedFolder', 'present');\n    localStorage.setItem('lastSelectedMonth', month);\n    setLastSelectedFolder('present');\n    setLastSelectedMonth(month);\n    await loadDataFromFolder('present', month);\n  };\n\n  // 폴더에서 데이터 로드하는 공통 함수\n  const loadDataFromFolder = useCallback(async (folder, month) => {\n    setLoading(true);\n    setError('');\n    try {\n      // 폴더에서 데이터 로드 (202201.json 형식)\n      const monthCode = month.replace('-', '');\n      const response = await fetch(`/data/${folder}/${monthCode}.json`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(`${folder} data loaded successfully:`, data);\n      if (!data || !data.contents || !Array.isArray(data.contents) || data.contents.length === 0) {\n        throw new Error('Invalid data structure');\n      }\n      setSentenceData(data);\n\n      // Check format and set initial data\n      const firstContent = data.contents[0];\n      if (isDateBasedContent(firstContent)) {\n        setIsDateBased(true);\n        setSentences(firstContent.sentences);\n        const actualDates = data.contents.filter(isDateBasedContent).map(content => content.date);\n        setAvailableFiles(actualDates);\n        if (actualDates.length > 0) {\n          setSelectedMonth(month);\n          setSelectedDate(actualDates[0]);\n        }\n      } else if (isCategoryContent(firstContent)) {\n        setIsDateBased(false);\n        setSelectedCategory('전체');\n        // 기본적으로 전체 컨텐츠 표시\n        const sections = createContentSections('전체');\n        setContentSections(sections);\n        const sentencesOnly = sections.filter(section => section.type === 'sentence').map(section => section.sentence).filter(Boolean);\n        setSentences(sentencesOnly);\n      }\n    } catch (err) {\n      console.error(`Error loading ${folder} data:`, err);\n      setError(err instanceof Error ? err.message : `${folder} 데이터를 불러올 수 없습니다.`);\n      setSentences([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [createContentSections]);\n\n  // 컨텐츠 섹션 생성 (서브카테고리 구분선 포함)\n  const createContentSections = useCallback(category => {\n    if (!sentenceData || !sentenceData.contents) return [];\n    const sections = [];\n    let idCounter = 1;\n    if (category === '전체') {\n      // 전체 선택 시 모든 카테고리와 서브카테고리 표시\n      sentenceData.contents.filter(isCategoryContent).forEach(categoryContent => {\n        // 카테고리 구분선\n        sections.push({\n          type: 'divider',\n          dividerText: categoryContent.category\n        });\n        categoryContent.subcategories.forEach(subcategory => {\n          // 서브카테고리 구분선\n          sections.push({\n            type: 'divider',\n            dividerText: subcategory.subcategory\n          });\n\n          // 문장들\n          subcategory.sentences.forEach(sentence => {\n            sections.push({\n              type: 'sentence',\n              sentence: {\n                ...sentence,\n                id: idCounter++\n              }\n            });\n          });\n        });\n      });\n    } else {\n      // 특정 카테고리 선택 시\n      const categoryData = sentenceData.contents.filter(isCategoryContent).find(content => content.category === category);\n      if (categoryData) {\n        categoryData.subcategories.forEach(subcategory => {\n          // 서브카테고리 구분선\n          sections.push({\n            type: 'divider',\n            dividerText: subcategory.subcategory\n          });\n\n          // 문장들\n          subcategory.sentences.forEach(sentence => {\n            sections.push({\n              type: 'sentence',\n              sentence: {\n                ...sentence,\n                id: idCounter++\n              }\n            });\n          });\n        });\n      }\n    }\n    return sections;\n  }, [sentenceData]);\n\n  // 카테고리 변경 핸들러\n  const handleCategoryChange = category => {\n    console.log('Category changed to:', category);\n    setSelectedCategory(category);\n\n    // 컨텐츠 섹션 생성 (서브카테고리 구분선 포함)\n    const sections = createContentSections(category);\n    setContentSections(sections);\n\n    // 기존 sentences도 업데이트 (호환성을 위해 유지)\n    const sentencesOnly = sections.filter(section => section.type === 'sentence').map(section => section.sentence).filter(Boolean);\n    setSentences(sentencesOnly);\n  };\n\n  // 날짜 변경 핸들러\n  const handleDateChange = date => {\n    console.log('Date changed to:', date);\n    setSelectedDate(date);\n\n    // 선택된 날짜에 해당하는 문장 데이터 찾기\n    if (sentenceData && sentenceData.contents) {\n      const selectedDateData = sentenceData.contents.filter(isDateBasedContent).find(content => content.date === date);\n      if (selectedDateData) {\n        console.log('Found data for date:', date, selectedDateData);\n        setSentences(selectedDateData.sentences);\n      } else {\n        console.log('No data found for date:', date);\n        setSentences([]);\n      }\n    }\n  };\n\n  // 다크 모드 토글\n  const toggleDarkMode = () => {\n    const newMode = !isDarkMode;\n    setIsDarkMode(newMode);\n    localStorage.setItem('isDarkMode', JSON.stringify(newMode));\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uC624\\uB958 \\uBC1C\\uC0DD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uBE0C\\uB77C\\uC6B0\\uC800 \\uCF58\\uC194(F12)\\uC744 \\uD655\\uC778\\uD574\\uC8FC\\uC138\\uC694.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${isDarkMode ? 'dark-mode' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\uC9C4\\uCC28\\uC774\\uB9B0 \\uC911\\uAD6D\\uC5B4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"theme-toggle\",\n          onClick: toggleDarkMode,\n          title: isDarkMode ? \"라이트 모드로 변경\" : \"다크 모드로 변경\",\n          children: isDarkMode ? '☀️' : '💡'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), (availableFiles.length > 0 || sentenceData || pastMonths.length > 0 || presentMonths.length > 0) && /*#__PURE__*/_jsxDEV(Navigation, {\n      availableDates: availableFiles,\n      pastMonths: pastMonths,\n      presentMonths: presentMonths,\n      selectedMonth: selectedMonth,\n      selectedDate: selectedDate,\n      selectedCategory: selectedCategory,\n      sentenceData: sentenceData,\n      isDateBased: isDateBased,\n      lastSelectedFolder: lastSelectedFolder,\n      lastSelectedMonth: lastSelectedMonth,\n      onMonthChange: handleMonthChange,\n      onDateChange: handleDateChange,\n      onCategoryChange: handleCategoryChange,\n      onPastMonthChange: handlePastMonthChange,\n      onPresentMonthChange: handlePresentMonthChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"content\",\n      children: contentSections.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-container\",\n        children: contentSections.map((section, index) => section.type === 'divider' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"subcategory-divider\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: section.dividerText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 19\n          }, this)\n        }, `divider-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 17\n        }, this) : section.sentence && /*#__PURE__*/_jsxDEV(SentenceCard, {\n          sentence: section.sentence\n        }, section.sentence.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this) : sentences.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sentences-container\",\n        children: sentences.map(sentence => /*#__PURE__*/_jsxDEV(SentenceCard, {\n          sentence: sentence\n        }, sentence.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD658\\uC601\\uD569\\uB2C8\\uB2E4!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uC704\\uC5D0\\uC11C \\uD559\\uC2B5\\uD560 \\uC790\\uB8CC\\uB97C \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 322,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"S/OmbwA06bMAf60zB+TpEMN36DQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Navigation","SentenceCard","isDateBasedContent","isCategoryContent","jsxDEV","_jsxDEV","App","_s","availableFiles","setAvailableFiles","pastMonths","setPastMonths","presentMonths","setPresentMonths","selectedMonth","setSelectedMonth","selectedDate","setSelectedDate","selectedCategory","setSelectedCategory","selectedSubcategory","lastSelectedFolder","setLastSelectedFolder","localStorage","getItem","lastSelectedMonth","setLastSelectedMonth","sentenceData","setSentenceData","sentences","setSentences","contentSections","setContentSections","loading","setLoading","error","setError","isDarkMode","setIsDarkMode","saved","JSON","parse","isDateBased","setIsDateBased","loadAllMonths","pastManifestResponse","fetch","ok","pastManifest","json","pastFiles","files","map","filename","match","filter","Boolean","console","log","presentManifestResponse","presentManifest","presentFiles","err","restoreLastSelection","loadDataFromFolder","setTimeout","handleMonthChange","month","monthDates","date","startsWith","length","handlePastMonthChange","setItem","handlePresentMonthChange","folder","monthCode","replace","response","Error","status","data","contents","Array","isArray","firstContent","actualDates","content","sections","createContentSections","sentencesOnly","section","type","sentence","message","category","idCounter","forEach","categoryContent","push","dividerText","subcategories","subcategory","id","categoryData","find","handleCategoryChange","handleDateChange","selectedDateData","toggleDarkMode","newMode","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","availableDates","onMonthChange","onDateChange","onCategoryChange","onPastMonthChange","onPresentMonthChange","index","_c","$RefreshReg$"],"sources":["D:/Coding/chinesestudy/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport Navigation from './components/Navigation';\nimport SentenceCard from './components/SentenceCard';\nimport { SentenceData, Sentence, isDateBasedContent, isCategoryContent, ContentSection } from './types';\nimport './styles/App.css';\n\nconst App: React.FC = () => {\n  const [availableFiles, setAvailableFiles] = useState<string[]>([]);\n  const [pastMonths, setPastMonths] = useState<string[]>([]);\n  const [presentMonths, setPresentMonths] = useState<string[]>([]);\n  const [selectedMonth, setSelectedMonth] = useState<string>('2025-08');\n  const [selectedDate, setSelectedDate] = useState<string>('2025-08-07');\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [selectedSubcategory] = useState<string>('');\n  const [lastSelectedFolder, setLastSelectedFolder] = useState<string>(() => {\n    return localStorage.getItem('lastSelectedFolder') || '';\n  });\n  const [lastSelectedMonth, setLastSelectedMonth] = useState<string>(() => {\n    return localStorage.getItem('lastSelectedMonth') || '';\n  });\n  const [sentenceData, setSentenceData] = useState<SentenceData | null>(null);\n  const [sentences, setSentences] = useState<Sentence[]>([]);\n  const [contentSections, setContentSections] = useState<ContentSection[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string>('');\n  const [isDarkMode, setIsDarkMode] = useState<boolean>(() => {\n    const saved = localStorage.getItem('isDarkMode');\n    return saved ? JSON.parse(saved) : false;\n  });\n  const [isDateBased, setIsDateBased] = useState<boolean>(false);\n\n  // 과거 및 현재 월 목록 로드\n  useEffect(() => {\n    const loadAllMonths = async () => {\n      try {\n        // 과거 파일 목록 로드\n        const pastManifestResponse = await fetch('/data/past/manifest.json');\n        if (pastManifestResponse.ok) {\n          const pastManifest = await pastManifestResponse.json();\n          const pastFiles = pastManifest.files || [];\n          \n          // 파일명에서 월 정보 추출 (202201.json -> 2022-01)\n          const pastMonths = pastFiles.map((filename: string) => {\n            const match = filename.match(/(\\d{4})(\\d{2})\\.json/);\n            if (match) {\n              return `${match[1]}-${match[2]}`;\n            }\n            return null;\n          }).filter(Boolean);\n          \n          setPastMonths(pastMonths);\n          console.log('Past months loaded:', pastMonths);\n        }\n        \n        // 현재 파일 목록 로드\n        const presentManifestResponse = await fetch('/data/present/manifest.json');\n        if (presentManifestResponse.ok) {\n          const presentManifest = await presentManifestResponse.json();\n          const presentFiles = presentManifest.files || [];\n          \n          // 파일명에서 월 정보 추출 (202508.json -> 2025-08)\n          const presentMonths = presentFiles.map((filename: string) => {\n            const match = filename.match(/(\\d{4})(\\d{2})\\.json/);\n            if (match) {\n              return `${match[1]}-${match[2]}`;\n            }\n            return null;\n          }).filter(Boolean);\n          \n          setPresentMonths(presentMonths);\n          console.log('Present months loaded:', presentMonths);\n        }\n      } catch (err) {\n        console.error('Error loading months:', err);\n      }\n    };\n    loadAllMonths();\n  }, []);\n\n  // 초기 로드 및 localStorage에서 마지막 선택 복원\n  useEffect(() => {\n    const restoreLastSelection = async () => {\n      if (lastSelectedFolder && lastSelectedMonth) {\n        console.log('Restoring last selection:', lastSelectedFolder, lastSelectedMonth);\n        await loadDataFromFolder(lastSelectedFolder as 'past' | 'present', lastSelectedMonth);\n      } else {\n        setLoading(false);\n      }\n    };\n    \n    // 월 목록이 로드된 후에 마지막 선택 복원\n    setTimeout(restoreLastSelection, 100);\n  }, [lastSelectedFolder, lastSelectedMonth, loadDataFromFolder]);\n\n  // 월 변경 핸들러\n  const handleMonthChange = (month: string) => {\n    console.log('Month changed to:', month);\n    setSelectedMonth(month);\n    \n    // 해당 월의 첫 번째 날짜 선택\n    const monthDates = availableFiles.filter(date => date.startsWith(month));\n    if (monthDates.length > 0) {\n      setSelectedDate(monthDates[0]);\n      // 여기서 새로운 데이터를 로드해야 함 (현재는 2025-08만 있음)\n    }\n  };\n\n  // 과거 월 선택 핸들러\n  const handlePastMonthChange = async (month: string) => {\n    console.log('Past month selected:', month);\n    localStorage.setItem('lastSelectedFolder', 'past');\n    localStorage.setItem('lastSelectedMonth', month);\n    setLastSelectedFolder('past');\n    setLastSelectedMonth(month);\n    await loadDataFromFolder('past', month);\n  };\n  \n  // 현재 월 선택 핸들러\n  const handlePresentMonthChange = async (month: string) => {\n    console.log('Present month selected:', month);\n    localStorage.setItem('lastSelectedFolder', 'present');\n    localStorage.setItem('lastSelectedMonth', month);\n    setLastSelectedFolder('present');\n    setLastSelectedMonth(month);\n    await loadDataFromFolder('present', month);\n  };\n  \n  // 폴더에서 데이터 로드하는 공통 함수\n  const loadDataFromFolder = useCallback(async (folder: 'past' | 'present', month: string) => {\n    setLoading(true);\n    setError('');\n    \n    try {\n      // 폴더에서 데이터 로드 (202201.json 형식)\n      const monthCode = month.replace('-', '');\n      const response = await fetch(`/data/${folder}/${monthCode}.json`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data: SentenceData = await response.json();\n      console.log(`${folder} data loaded successfully:`, data);\n      \n      if (!data || !data.contents || !Array.isArray(data.contents) || data.contents.length === 0) {\n        throw new Error('Invalid data structure');\n      }\n      \n      setSentenceData(data);\n      \n      // Check format and set initial data\n      const firstContent = data.contents[0];\n      if (isDateBasedContent(firstContent)) {\n        setIsDateBased(true);\n        setSentences(firstContent.sentences);\n        const actualDates = data.contents\n          .filter(isDateBasedContent)\n          .map(content => content.date);\n        setAvailableFiles(actualDates);\n        if (actualDates.length > 0) {\n          setSelectedMonth(month);\n          setSelectedDate(actualDates[0]);\n        }\n      } else if (isCategoryContent(firstContent)) {\n        setIsDateBased(false);\n        setSelectedCategory('전체');\n        // 기본적으로 전체 컨텐츠 표시\n        const sections = createContentSections('전체');\n        setContentSections(sections);\n        \n        const sentencesOnly = sections\n          .filter(section => section.type === 'sentence')\n          .map(section => section.sentence!)\n          .filter(Boolean);\n        setSentences(sentencesOnly);\n      }\n    } catch (err) {\n      console.error(`Error loading ${folder} data:`, err);\n      setError(err instanceof Error ? err.message : `${folder} 데이터를 불러올 수 없습니다.`);\n      setSentences([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [createContentSections]);\n\n\n  // 컨텐츠 섹션 생성 (서브카테고리 구분선 포함)\n  const createContentSections = useCallback((category: string) => {\n    if (!sentenceData || !sentenceData.contents) return [];\n    \n    const sections: ContentSection[] = [];\n    let idCounter = 1;\n    \n    if (category === '전체') {\n      // 전체 선택 시 모든 카테고리와 서브카테고리 표시\n      sentenceData.contents\n        .filter(isCategoryContent)\n        .forEach(categoryContent => {\n          // 카테고리 구분선\n          sections.push({\n            type: 'divider',\n            dividerText: categoryContent.category\n          });\n          \n          categoryContent.subcategories.forEach(subcategory => {\n            // 서브카테고리 구분선\n            sections.push({\n              type: 'divider',\n              dividerText: subcategory.subcategory\n            });\n            \n            // 문장들\n            subcategory.sentences.forEach(sentence => {\n              sections.push({\n                type: 'sentence',\n                sentence: {\n                  ...sentence,\n                  id: idCounter++\n                }\n              });\n            });\n          });\n        });\n    } else {\n      // 특정 카테고리 선택 시\n      const categoryData = sentenceData.contents\n        .filter(isCategoryContent)\n        .find(content => content.category === category);\n      \n      if (categoryData) {\n        categoryData.subcategories.forEach(subcategory => {\n          // 서브카테고리 구분선\n          sections.push({\n            type: 'divider',\n            dividerText: subcategory.subcategory\n          });\n          \n          // 문장들\n          subcategory.sentences.forEach(sentence => {\n            sections.push({\n              type: 'sentence',\n              sentence: {\n                ...sentence,\n                id: idCounter++\n              }\n            });\n          });\n        });\n      }\n    }\n    \n    return sections;\n  }, [sentenceData]);\n\n  // 카테고리 변경 핸들러\n  const handleCategoryChange = (category: string) => {\n    console.log('Category changed to:', category);\n    setSelectedCategory(category);\n    \n    // 컨텐츠 섹션 생성 (서브카테고리 구분선 포함)\n    const sections = createContentSections(category);\n    setContentSections(sections);\n    \n    // 기존 sentences도 업데이트 (호환성을 위해 유지)\n    const sentencesOnly = sections\n      .filter(section => section.type === 'sentence')\n      .map(section => section.sentence!)\n      .filter(Boolean);\n    setSentences(sentencesOnly);\n  };\n\n\n  // 날짜 변경 핸들러\n  const handleDateChange = (date: string) => {\n    console.log('Date changed to:', date);\n    setSelectedDate(date);\n    \n    // 선택된 날짜에 해당하는 문장 데이터 찾기\n    if (sentenceData && sentenceData.contents) {\n      const selectedDateData = sentenceData.contents\n        .filter(isDateBasedContent)\n        .find(content => content.date === date);\n      if (selectedDateData) {\n        console.log('Found data for date:', date, selectedDateData);\n        setSentences(selectedDateData.sentences);\n      } else {\n        console.log('No data found for date:', date);\n        setSentences([]);\n      }\n    }\n  };\n\n\n  // 다크 모드 토글\n  const toggleDarkMode = () => {\n    const newMode = !isDarkMode;\n    setIsDarkMode(newMode);\n    localStorage.setItem('isDarkMode', JSON.stringify(newMode));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"app\">\n        <div className=\"loading\">데이터를 불러오는 중...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"app\">\n        <div className=\"error\">\n          <h2>오류 발생</h2>\n          <p>{error}</p>\n          <p>브라우저 콘솔(F12)을 확인해주세요.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`app ${isDarkMode ? 'dark-mode' : ''}`}>\n      <header className=\"app-header\">\n        <div className=\"header-title\">\n          <h1>진차이린 중국어</h1>\n          <button \n            type=\"button\"\n            className=\"theme-toggle\" \n            onClick={toggleDarkMode}\n            title={isDarkMode ? \"라이트 모드로 변경\" : \"다크 모드로 변경\"}\n          >\n            {isDarkMode ? '☀️' : '💡'}\n          </button>\n        </div>\n        {/* <div className=\"date-info\">{formatDateDisplay()}</div> */}\n      </header>\n\n      {(availableFiles.length > 0 || sentenceData || pastMonths.length > 0 || presentMonths.length > 0) && (\n        <Navigation\n          availableDates={availableFiles}\n          pastMonths={pastMonths}\n          presentMonths={presentMonths}\n          selectedMonth={selectedMonth}\n          selectedDate={selectedDate}\n          selectedCategory={selectedCategory}\n          sentenceData={sentenceData}\n          isDateBased={isDateBased}\n          lastSelectedFolder={lastSelectedFolder}\n          lastSelectedMonth={lastSelectedMonth}\n          onMonthChange={handleMonthChange}\n          onDateChange={handleDateChange}\n          onCategoryChange={handleCategoryChange}\n          onPastMonthChange={handlePastMonthChange}\n          onPresentMonthChange={handlePresentMonthChange}\n        />\n      )}\n\n      <main className=\"content\">\n        {contentSections.length > 0 ? (\n          <div className=\"content-container\">\n            {contentSections.map((section, index) => (\n              section.type === 'divider' ? (\n                <div key={`divider-${index}`} className=\"subcategory-divider\">\n                  <h3>{section.dividerText}</h3>\n                </div>\n              ) : (\n                section.sentence && (\n                  <SentenceCard key={section.sentence.id} sentence={section.sentence} />\n                )\n              )\n            ))}\n          </div>\n        ) : sentences.length > 0 ? (\n          <div className=\"sentences-container\">\n            {sentences.map((sentence) => (\n              <SentenceCard key={sentence.id} sentence={sentence} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"error\">\n            <h2>환영합니다!</h2>\n            <p>위에서 학습할 자료를 선택해주세요.</p>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}