{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\chinesestudy\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Navigation from './components/Navigation';\nimport SentenceCard from './components/SentenceCard';\nimport { isDateBasedContent, isCategoryContent } from './types';\nimport './styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [availableFiles, setAvailableFiles] = useState([]);\n  const [pastMonths, setPastMonths] = useState([]);\n  const [presentMonths, setPresentMonths] = useState([]);\n  const [selectedMonth, setSelectedMonth] = useState('2025-08');\n  const [selectedDate, setSelectedDate] = useState('2025-08-07');\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [selectedSubcategory, setSelectedSubcategory] = useState('');\n  const [sentenceData, setSentenceData] = useState(null);\n  const [sentences, setSentences] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    const saved = localStorage.getItem('isDarkMode');\n    return saved ? JSON.parse(saved) : false;\n  });\n  const [isDateBased, setIsDateBased] = useState(false);\n\n  // 과거 및 현재 월 목록 로드\n  useEffect(() => {\n    const loadAllMonths = async () => {\n      try {\n        // 과거 파일 목록 로드\n        const pastManifestResponse = await fetch('/data/past/manifest.json');\n        if (pastManifestResponse.ok) {\n          const pastManifest = await pastManifestResponse.json();\n          const pastFiles = pastManifest.files || [];\n\n          // 파일명에서 월 정보 추출 (202201.json -> 2022-01)\n          const pastMonths = pastFiles.map(filename => {\n            const match = filename.match(/(\\d{4})(\\d{2})\\.json/);\n            if (match) {\n              return `${match[1]}-${match[2]}`;\n            }\n            return null;\n          }).filter(Boolean);\n          setPastMonths(pastMonths);\n          console.log('Past months loaded:', pastMonths);\n        }\n\n        // 현재 파일 목록 로드\n        const presentManifestResponse = await fetch('/data/present/manifest.json');\n        if (presentManifestResponse.ok) {\n          const presentManifest = await presentManifestResponse.json();\n          const presentFiles = presentManifest.files || [];\n\n          // 파일명에서 월 정보 추출 (202508.json -> 2025-08)\n          const presentMonths = presentFiles.map(filename => {\n            const match = filename.match(/(\\d{4})(\\d{2})\\.json/);\n            if (match) {\n              return `${match[1]}-${match[2]}`;\n            }\n            return null;\n          }).filter(Boolean);\n          setPresentMonths(presentMonths);\n          console.log('Present months loaded:', presentMonths);\n        }\n      } catch (err) {\n        console.error('Error loading months:', err);\n      }\n    };\n    loadAllMonths();\n  }, []);\n\n  // 초기 데이터 로드\n  useEffect(() => {\n    const loadInitialData = async () => {\n      setLoading(true);\n      setError('');\n      try {\n        console.log('Fetching data from /data/sentences202508.json');\n        const response = await fetch('/data/sentences202508.json');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Data loaded successfully:', data);\n        console.log('Contents array:', data.contents);\n        if (!data || !data.contents || !Array.isArray(data.contents) || data.contents.length === 0) {\n          throw new Error('Invalid data structure');\n        }\n        setSentenceData(data);\n\n        // Check if data is date-based or category-based\n        const firstContent = data.contents[0];\n        if (isDateBasedContent(firstContent)) {\n          // Date-based structure (old format)\n          setIsDateBased(true);\n          console.log('Date-based structure detected');\n          setSentences(firstContent.sentences);\n          const actualDates = data.contents.filter(isDateBasedContent).map(content => content.date);\n          console.log('Actual dates from JSON:', actualDates);\n          setAvailableFiles(actualDates);\n          if (actualDates.length > 0) {\n            const firstDate = actualDates[0];\n            const month = firstDate.substring(0, 7);\n            setSelectedMonth(month);\n            setSelectedDate(firstDate);\n          }\n        } else if (isCategoryContent(firstContent)) {\n          // Category-based structure (new format)\n          setIsDateBased(false);\n          console.log('Category-based structure detected');\n          setSelectedCategory(firstContent.category);\n          if (firstContent.subcategories.length > 0) {\n            const firstSubcat = firstContent.subcategories[0];\n            setSelectedSubcategory(firstSubcat.subcategory);\n            setSentences(firstSubcat.sentences);\n          }\n        }\n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err instanceof Error ? err.message : '데이터를 불러올 수 없습니다.');\n        setSentences([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadInitialData();\n  }, []);\n\n  // 월 변경 핸들러\n  const handleMonthChange = month => {\n    console.log('Month changed to:', month);\n    setSelectedMonth(month);\n\n    // 해당 월의 첫 번째 날짜 선택\n    const monthDates = availableFiles.filter(date => date.startsWith(month));\n    if (monthDates.length > 0) {\n      setSelectedDate(monthDates[0]);\n      // 여기서 새로운 데이터를 로드해야 함 (현재는 2025-08만 있음)\n    }\n  };\n\n  // 과거 월 선택 핸들러\n  const handlePastMonthChange = async month => {\n    console.log('Past month selected:', month);\n    await loadDataFromFolder('past', month);\n  };\n\n  // 현재 월 선택 핸들러\n  const handlePresentMonthChange = async month => {\n    console.log('Present month selected:', month);\n    await loadDataFromFolder('present', month);\n  };\n\n  // 폴더에서 데이터 로드하는 공통 함수\n  const loadDataFromFolder = async (folder, month) => {\n    setLoading(true);\n    setError('');\n    try {\n      // 폴더에서 데이터 로드 (202201.json 형식)\n      const monthCode = month.replace('-', '');\n      const response = await fetch(`/data/${folder}/${monthCode}.json`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(`${folder} data loaded successfully:`, data);\n      if (!data || !data.contents || !Array.isArray(data.contents) || data.contents.length === 0) {\n        throw new Error('Invalid data structure');\n      }\n      setSentenceData(data);\n\n      // Check format and set initial data\n      const firstContent = data.contents[0];\n      if (isDateBasedContent(firstContent)) {\n        setIsDateBased(true);\n        setSentences(firstContent.sentences);\n        const actualDates = data.contents.filter(isDateBasedContent).map(content => content.date);\n        setAvailableFiles(actualDates);\n        if (actualDates.length > 0) {\n          setSelectedMonth(month);\n          setSelectedDate(actualDates[0]);\n        }\n      } else if (isCategoryContent(firstContent)) {\n        setIsDateBased(false);\n        setSelectedCategory(firstContent.category);\n        if (firstContent.subcategories.length > 0) {\n          const firstSubcat = firstContent.subcategories[0];\n          setSelectedSubcategory(firstSubcat.subcategory);\n          setSentences(firstSubcat.sentences);\n        }\n      }\n    } catch (err) {\n      console.error(`Error loading ${folder} data:`, err);\n      setError(err instanceof Error ? err.message : `${folder} 데이터를 불러올 수 없습니다.`);\n      setSentences([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 카테고리 변경 핸들러\n  const handleCategoryChange = category => {\n    console.log('Category changed to:', category);\n    setSelectedCategory(category);\n    if (sentenceData && sentenceData.contents) {\n      const categoryData = sentenceData.contents.filter(isCategoryContent).find(content => content.category === category);\n      if (categoryData && categoryData.subcategories.length > 0) {\n        const firstSubcat = categoryData.subcategories[0];\n        setSelectedSubcategory(firstSubcat.subcategory);\n        setSentences(firstSubcat.sentences);\n      }\n    }\n  };\n\n  // 서브카테고리 변경 핸들러\n  const handleSubcategoryChange = subcategory => {\n    console.log('Subcategory changed to:', subcategory);\n    setSelectedSubcategory(subcategory);\n    if (sentenceData && sentenceData.contents) {\n      const categoryData = sentenceData.contents.filter(isCategoryContent).find(content => content.category === selectedCategory);\n      if (categoryData) {\n        const subcatData = categoryData.subcategories.find(subcat => subcat.subcategory === subcategory);\n        if (subcatData) {\n          setSentences(subcatData.sentences);\n        }\n      }\n    }\n  };\n\n  // 날짜 변경 핸들러\n  const handleDateChange = date => {\n    console.log('Date changed to:', date);\n    setSelectedDate(date);\n\n    // 선택된 날짜에 해당하는 문장 데이터 찾기\n    if (sentenceData && sentenceData.contents) {\n      const selectedDateData = sentenceData.contents.filter(isDateBasedContent).find(content => content.date === date);\n      if (selectedDateData) {\n        console.log('Found data for date:', date, selectedDateData);\n        setSentences(selectedDateData.sentences);\n      } else {\n        console.log('No data found for date:', date);\n        setSentences([]);\n      }\n    }\n  };\n\n  // 다크 모드 토글\n  const toggleDarkMode = () => {\n    const newMode = !isDarkMode;\n    setIsDarkMode(newMode);\n    localStorage.setItem('isDarkMode', JSON.stringify(newMode));\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB370\\uC774\\uD130\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uC624\\uB958 \\uBC1C\\uC0DD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uBE0C\\uB77C\\uC6B0\\uC800 \\uCF58\\uC194(F12)\\uC744 \\uD655\\uC778\\uD574\\uC8FC\\uC138\\uC694.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${isDarkMode ? 'dark-mode' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\uC9C4\\uCC28\\uC774\\uB9B0 \\uC911\\uAD6D\\uC5B4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"theme-toggle\",\n          onClick: toggleDarkMode,\n          title: isDarkMode ? \"라이트 모드로 변경\" : \"다크 모드로 변경\",\n          children: isDarkMode ? '☀️' : '💡'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), (availableFiles.length > 0 || sentenceData || pastMonths.length > 0 || presentMonths.length > 0) && /*#__PURE__*/_jsxDEV(Navigation, {\n      availableDates: availableFiles,\n      pastMonths: pastMonths,\n      presentMonths: presentMonths,\n      selectedMonth: selectedMonth,\n      selectedDate: selectedDate,\n      selectedCategory: selectedCategory,\n      selectedSubcategory: selectedSubcategory,\n      sentenceData: sentenceData,\n      isDateBased: isDateBased,\n      onMonthChange: handleMonthChange,\n      onDateChange: handleDateChange,\n      onCategoryChange: handleCategoryChange,\n      onSubcategoryChange: handleSubcategoryChange,\n      onPastMonthChange: handlePastMonthChange,\n      onPresentMonthChange: handlePresentMonthChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"content\",\n      children: sentences.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sentences-container\",\n        children: sentences.map(sentence => /*#__PURE__*/_jsxDEV(SentenceCard, {\n          sentence: sentence\n        }, sentence.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uB370\\uC774\\uD130 \\uC5C6\\uC74C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD45C\\uC2DC\\uD560 \\uBB38\\uC7A5\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Z1kDYZwOL77qnBu7sUrUC63pJX0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navigation","SentenceCard","isDateBasedContent","isCategoryContent","jsxDEV","_jsxDEV","App","_s","availableFiles","setAvailableFiles","pastMonths","setPastMonths","presentMonths","setPresentMonths","selectedMonth","setSelectedMonth","selectedDate","setSelectedDate","selectedCategory","setSelectedCategory","selectedSubcategory","setSelectedSubcategory","sentenceData","setSentenceData","sentences","setSentences","loading","setLoading","error","setError","isDarkMode","setIsDarkMode","saved","localStorage","getItem","JSON","parse","isDateBased","setIsDateBased","loadAllMonths","pastManifestResponse","fetch","ok","pastManifest","json","pastFiles","files","map","filename","match","filter","Boolean","console","log","presentManifestResponse","presentManifest","presentFiles","err","loadInitialData","response","Error","status","data","contents","Array","isArray","length","firstContent","actualDates","content","date","firstDate","month","substring","category","subcategories","firstSubcat","subcategory","message","handleMonthChange","monthDates","startsWith","handlePastMonthChange","loadDataFromFolder","handlePresentMonthChange","folder","monthCode","replace","handleCategoryChange","categoryData","find","handleSubcategoryChange","subcatData","subcat","handleDateChange","selectedDateData","toggleDarkMode","newMode","setItem","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","title","availableDates","onMonthChange","onDateChange","onCategoryChange","onSubcategoryChange","onPastMonthChange","onPresentMonthChange","sentence","id","_c","$RefreshReg$"],"sources":["D:/Coding/chinesestudy/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Navigation from './components/Navigation';\nimport SentenceCard from './components/SentenceCard';\nimport { SentenceData, Sentence, isDateBasedContent, isCategoryContent } from './types';\nimport './styles/App.css';\n\nconst App: React.FC = () => {\n  const [availableFiles, setAvailableFiles] = useState<string[]>([]);\n  const [pastMonths, setPastMonths] = useState<string[]>([]);\n  const [presentMonths, setPresentMonths] = useState<string[]>([]);\n  const [selectedMonth, setSelectedMonth] = useState<string>('2025-08');\n  const [selectedDate, setSelectedDate] = useState<string>('2025-08-07');\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [selectedSubcategory, setSelectedSubcategory] = useState<string>('');\n  const [sentenceData, setSentenceData] = useState<SentenceData | null>(null);\n  const [sentences, setSentences] = useState<Sentence[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string>('');\n  const [isDarkMode, setIsDarkMode] = useState<boolean>(() => {\n    const saved = localStorage.getItem('isDarkMode');\n    return saved ? JSON.parse(saved) : false;\n  });\n  const [isDateBased, setIsDateBased] = useState<boolean>(false);\n\n  // 과거 및 현재 월 목록 로드\n  useEffect(() => {\n    const loadAllMonths = async () => {\n      try {\n        // 과거 파일 목록 로드\n        const pastManifestResponse = await fetch('/data/past/manifest.json');\n        if (pastManifestResponse.ok) {\n          const pastManifest = await pastManifestResponse.json();\n          const pastFiles = pastManifest.files || [];\n          \n          // 파일명에서 월 정보 추출 (202201.json -> 2022-01)\n          const pastMonths = pastFiles.map((filename: string) => {\n            const match = filename.match(/(\\d{4})(\\d{2})\\.json/);\n            if (match) {\n              return `${match[1]}-${match[2]}`;\n            }\n            return null;\n          }).filter(Boolean);\n          \n          setPastMonths(pastMonths);\n          console.log('Past months loaded:', pastMonths);\n        }\n        \n        // 현재 파일 목록 로드\n        const presentManifestResponse = await fetch('/data/present/manifest.json');\n        if (presentManifestResponse.ok) {\n          const presentManifest = await presentManifestResponse.json();\n          const presentFiles = presentManifest.files || [];\n          \n          // 파일명에서 월 정보 추출 (202508.json -> 2025-08)\n          const presentMonths = presentFiles.map((filename: string) => {\n            const match = filename.match(/(\\d{4})(\\d{2})\\.json/);\n            if (match) {\n              return `${match[1]}-${match[2]}`;\n            }\n            return null;\n          }).filter(Boolean);\n          \n          setPresentMonths(presentMonths);\n          console.log('Present months loaded:', presentMonths);\n        }\n      } catch (err) {\n        console.error('Error loading months:', err);\n      }\n    };\n    loadAllMonths();\n  }, []);\n\n  // 초기 데이터 로드\n  useEffect(() => {\n    const loadInitialData = async () => {\n      setLoading(true);\n      setError('');\n      \n      try {\n        console.log('Fetching data from /data/sentences202508.json');\n        const response = await fetch('/data/sentences202508.json');\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data: SentenceData = await response.json();\n        console.log('Data loaded successfully:', data);\n        console.log('Contents array:', data.contents);\n        \n        if (!data || !data.contents || !Array.isArray(data.contents) || data.contents.length === 0) {\n          throw new Error('Invalid data structure');\n        }\n        \n        setSentenceData(data);\n        \n        // Check if data is date-based or category-based\n        const firstContent = data.contents[0];\n        if (isDateBasedContent(firstContent)) {\n          // Date-based structure (old format)\n          setIsDateBased(true);\n          console.log('Date-based structure detected');\n          setSentences(firstContent.sentences);\n          \n          const actualDates = data.contents\n            .filter(isDateBasedContent)\n            .map(content => content.date);\n          console.log('Actual dates from JSON:', actualDates);\n          \n          setAvailableFiles(actualDates);\n          if (actualDates.length > 0) {\n            const firstDate = actualDates[0];\n            const month = firstDate.substring(0, 7);\n            setSelectedMonth(month);\n            setSelectedDate(firstDate);\n          }\n        } else if (isCategoryContent(firstContent)) {\n          // Category-based structure (new format)\n          setIsDateBased(false);\n          console.log('Category-based structure detected');\n          setSelectedCategory(firstContent.category);\n          \n          if (firstContent.subcategories.length > 0) {\n            const firstSubcat = firstContent.subcategories[0];\n            setSelectedSubcategory(firstSubcat.subcategory);\n            setSentences(firstSubcat.sentences);\n          }\n        }\n        \n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError(err instanceof Error ? err.message : '데이터를 불러올 수 없습니다.');\n        setSentences([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadInitialData();\n  }, []);\n\n  // 월 변경 핸들러\n  const handleMonthChange = (month: string) => {\n    console.log('Month changed to:', month);\n    setSelectedMonth(month);\n    \n    // 해당 월의 첫 번째 날짜 선택\n    const monthDates = availableFiles.filter(date => date.startsWith(month));\n    if (monthDates.length > 0) {\n      setSelectedDate(monthDates[0]);\n      // 여기서 새로운 데이터를 로드해야 함 (현재는 2025-08만 있음)\n    }\n  };\n\n  // 과거 월 선택 핸들러\n  const handlePastMonthChange = async (month: string) => {\n    console.log('Past month selected:', month);\n    await loadDataFromFolder('past', month);\n  };\n  \n  // 현재 월 선택 핸들러\n  const handlePresentMonthChange = async (month: string) => {\n    console.log('Present month selected:', month);\n    await loadDataFromFolder('present', month);\n  };\n  \n  // 폴더에서 데이터 로드하는 공통 함수\n  const loadDataFromFolder = async (folder: 'past' | 'present', month: string) => {\n    setLoading(true);\n    setError('');\n    \n    try {\n      // 폴더에서 데이터 로드 (202201.json 형식)\n      const monthCode = month.replace('-', '');\n      const response = await fetch(`/data/${folder}/${monthCode}.json`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data: SentenceData = await response.json();\n      console.log(`${folder} data loaded successfully:`, data);\n      \n      if (!data || !data.contents || !Array.isArray(data.contents) || data.contents.length === 0) {\n        throw new Error('Invalid data structure');\n      }\n      \n      setSentenceData(data);\n      \n      // Check format and set initial data\n      const firstContent = data.contents[0];\n      if (isDateBasedContent(firstContent)) {\n        setIsDateBased(true);\n        setSentences(firstContent.sentences);\n        const actualDates = data.contents\n          .filter(isDateBasedContent)\n          .map(content => content.date);\n        setAvailableFiles(actualDates);\n        if (actualDates.length > 0) {\n          setSelectedMonth(month);\n          setSelectedDate(actualDates[0]);\n        }\n      } else if (isCategoryContent(firstContent)) {\n        setIsDateBased(false);\n        setSelectedCategory(firstContent.category);\n        if (firstContent.subcategories.length > 0) {\n          const firstSubcat = firstContent.subcategories[0];\n          setSelectedSubcategory(firstSubcat.subcategory);\n          setSentences(firstSubcat.sentences);\n        }\n      }\n    } catch (err) {\n      console.error(`Error loading ${folder} data:`, err);\n      setError(err instanceof Error ? err.message : `${folder} 데이터를 불러올 수 없습니다.`);\n      setSentences([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 카테고리 변경 핸들러\n  const handleCategoryChange = (category: string) => {\n    console.log('Category changed to:', category);\n    setSelectedCategory(category);\n    \n    if (sentenceData && sentenceData.contents) {\n      const categoryData = sentenceData.contents\n        .filter(isCategoryContent)\n        .find(content => content.category === category);\n      \n      if (categoryData && categoryData.subcategories.length > 0) {\n        const firstSubcat = categoryData.subcategories[0];\n        setSelectedSubcategory(firstSubcat.subcategory);\n        setSentences(firstSubcat.sentences);\n      }\n    }\n  };\n\n  // 서브카테고리 변경 핸들러\n  const handleSubcategoryChange = (subcategory: string) => {\n    console.log('Subcategory changed to:', subcategory);\n    setSelectedSubcategory(subcategory);\n    \n    if (sentenceData && sentenceData.contents) {\n      const categoryData = sentenceData.contents\n        .filter(isCategoryContent)\n        .find(content => content.category === selectedCategory);\n      \n      if (categoryData) {\n        const subcatData = categoryData.subcategories.find(\n          subcat => subcat.subcategory === subcategory\n        );\n        if (subcatData) {\n          setSentences(subcatData.sentences);\n        }\n      }\n    }\n  };\n\n  // 날짜 변경 핸들러\n  const handleDateChange = (date: string) => {\n    console.log('Date changed to:', date);\n    setSelectedDate(date);\n    \n    // 선택된 날짜에 해당하는 문장 데이터 찾기\n    if (sentenceData && sentenceData.contents) {\n      const selectedDateData = sentenceData.contents\n        .filter(isDateBasedContent)\n        .find(content => content.date === date);\n      if (selectedDateData) {\n        console.log('Found data for date:', date, selectedDateData);\n        setSentences(selectedDateData.sentences);\n      } else {\n        console.log('No data found for date:', date);\n        setSentences([]);\n      }\n    }\n  };\n\n\n  // 다크 모드 토글\n  const toggleDarkMode = () => {\n    const newMode = !isDarkMode;\n    setIsDarkMode(newMode);\n    localStorage.setItem('isDarkMode', JSON.stringify(newMode));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"app\">\n        <div className=\"loading\">데이터를 불러오는 중...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"app\">\n        <div className=\"error\">\n          <h2>오류 발생</h2>\n          <p>{error}</p>\n          <p>브라우저 콘솔(F12)을 확인해주세요.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`app ${isDarkMode ? 'dark-mode' : ''}`}>\n      <header className=\"app-header\">\n        <div className=\"header-title\">\n          <h1>진차이린 중국어</h1>\n          <button \n            type=\"button\"\n            className=\"theme-toggle\" \n            onClick={toggleDarkMode}\n            title={isDarkMode ? \"라이트 모드로 변경\" : \"다크 모드로 변경\"}\n          >\n            {isDarkMode ? '☀️' : '💡'}\n          </button>\n        </div>\n        {/* <div className=\"date-info\">{formatDateDisplay()}</div> */}\n      </header>\n\n      {(availableFiles.length > 0 || sentenceData || pastMonths.length > 0 || presentMonths.length > 0) && (\n        <Navigation\n          availableDates={availableFiles}\n          pastMonths={pastMonths}\n          presentMonths={presentMonths}\n          selectedMonth={selectedMonth}\n          selectedDate={selectedDate}\n          selectedCategory={selectedCategory}\n          selectedSubcategory={selectedSubcategory}\n          sentenceData={sentenceData}\n          isDateBased={isDateBased}\n          onMonthChange={handleMonthChange}\n          onDateChange={handleDateChange}\n          onCategoryChange={handleCategoryChange}\n          onSubcategoryChange={handleSubcategoryChange}\n          onPastMonthChange={handlePastMonthChange}\n          onPresentMonthChange={handlePresentMonthChange}\n        />\n      )}\n\n      <main className=\"content\">\n        {sentences.length > 0 ? (\n          <div className=\"sentences-container\">\n            {sentences.map((sentence) => (\n              <SentenceCard key={sentence.id} sentence={sentence} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"error\">\n            <h2>데이터 없음</h2>\n            <p>표시할 문장이 없습니다.</p>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}